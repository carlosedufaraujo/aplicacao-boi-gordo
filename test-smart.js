#!/usr/bin/env node

/**
 * üß™ TESTE INTELIGENTE - SISTEMA MIGRADO
 * Testa navega√ß√£o por bot√µes (n√£o links)
 */

import puppeteer from 'puppeteer';

const FRONTEND_URL = 'http://localhost:5174';
const TESTS = [];

function addTest(name, success, error = null, data = null) {
  TESTS.push({ name, success, error: error?.message || error, data, timestamp: new Date().toISOString() });
}

async function runSmartTests() {
  console.log('üß† Iniciando testes inteligentes...\n');
  
  const browser = await puppeteer.launch({ headless: false, defaultViewport: { width: 1280, height: 720 } });
  const page = await browser.newPage();
  
  const consoleErrors = [];
  page.on('console', msg => {
    if (msg.type() === 'error') consoleErrors.push(msg.text());
  });

  try {
    // TESTE 1: Carregamento
    console.log('üì± Teste 1: Carregamento...');
    await page.goto(FRONTEND_URL, { waitUntil: 'networkidle2', timeout: 15000 });
    const title = await page.title();
    addTest('Sistema carrega', title.includes('BoviControl'), null, { title });
    
    // Aguardar sidebar carregar
    await page.waitForTimeout(3000);
    
    // TESTE 2: Sidebar existe
    console.log('üîß Teste 2: Sidebar...');
    const sidebarExists = await page.$('.sidebar, [data-sidebar], nav') !== null;
    addTest('Sidebar presente', sidebarExists);
    
    // TESTE 3: Bot√µes de navega√ß√£o
    console.log('üéØ Teste 3: Bot√µes de navega√ß√£o...');
    const navButtons = await page.$$('button[role="menuitem"], button:has-text("Compras"), button:has-text("Vendas"), button:has-text("Cadastros"), button:has-text("DRE")');
    addTest('Bot√µes navega√ß√£o encontrados', navButtons.length > 0, null, { count: navButtons.length });
    
    // TESTE 4: Testar clique em Compras
    console.log('üõí Teste 4: Navega√ß√£o Compras...');
    try {
      const comprasBtn = await page.$('button:has-text("Compras")') || await page.$('*:has-text("Compras")');
      if (comprasBtn) {
        await comprasBtn.click();
        await page.waitForTimeout(2000);
        
        // Verificar se mudou de p√°gina
        const pipelineContent = await page.$('.pipeline, .purchase, .kanban, h1:has-text("Compras"), h1:has-text("Pipeline")') !== null;
        addTest('Navega√ß√£o Compras funciona', pipelineContent);
      } else {
        addTest('Navega√ß√£o Compras funciona', false, 'Bot√£o n√£o encontrado');
      }
    } catch (error) {
      addTest('Navega√ß√£o Compras funciona', false, error);
    }
    
    // TESTE 5: Testar clique em Vendas
    console.log('üí∞ Teste 5: Navega√ß√£o Vendas...');
    try {
      const vendasBtn = await page.$('button:has-text("Vendas")') || await page.$('*:has-text("Vendas")');
      if (vendasBtn) {
        await vendasBtn.click();
        await page.waitForTimeout(2000);
        
        const salesContent = await page.$('.sales, .pipeline, h1:has-text("Vendas"), h1:has-text("Sales")') !== null;
        addTest('Navega√ß√£o Vendas funciona', salesContent);
      } else {
        addTest('Navega√ß√£o Vendas funciona', false, 'Bot√£o n√£o encontrado');
      }
    } catch (error) {
      addTest('Navega√ß√£o Vendas funciona', false, error);
    }
    
    // TESTE 6: Testar clique em Cadastros
    console.log('üìã Teste 6: Navega√ß√£o Cadastros...');
    try {
      const cadastrosBtn = await page.$('button:has-text("Cadastros")') || await page.$('*:has-text("Cadastros")');
      if (cadastrosBtn) {
        await cadastrosBtn.click();
        await page.waitForTimeout(2000);
        
        const registrationsContent = await page.$('.registrations, .cadastros, h1:has-text("Cadastros")') !== null;
        addTest('Navega√ß√£o Cadastros funciona', registrationsContent);
      } else {
        addTest('Navega√ß√£o Cadastros funciona', false, 'Bot√£o n√£o encontrado');
      }
    } catch (error) {
      addTest('Navega√ß√£o Cadastros funciona', false, error);
    }
    
    // TESTE 7: Voltar ao Dashboard
    console.log('üìä Teste 7: Voltar Dashboard...');
    try {
      const dashboardBtn = await page.$('button:has-text("Dashboard")') || await page.$('*:has-text("Dashboard")');
      if (dashboardBtn) {
        await dashboardBtn.click();
        await page.waitForTimeout(2000);
        
        const dashboardContent = await page.$('.dashboard, h1:has-text("Dashboard"), canvas, svg') !== null;
        addTest('Volta ao Dashboard funciona', dashboardContent);
      } else {
        addTest('Volta ao Dashboard funciona', false, 'Bot√£o n√£o encontrado');
      }
    } catch (error) {
      addTest('Volta ao Dashboard funciona', false, error);
    }
    
    // TESTE 8: Verificar erros cr√≠ticos
    console.log('üîç Teste 8: Erros cr√≠ticos...');
    await page.waitForTimeout(2000);
    
    const criticalErrors = consoleErrors.filter(error => 
      error.includes('TypeError') || 
      error.includes('ReferenceError') ||
      error.includes('Failed to fetch') ||
      error.includes('Network Error')
    );
    
    addTest('Sem erros cr√≠ticos', criticalErrors.length === 0, null, { 
      totalErrors: consoleErrors.length,
      criticalErrors: criticalErrors.length,
      errors: criticalErrors.slice(0, 3)
    });
    
  } catch (error) {
    addTest('Teste geral', false, error);
  } finally {
    await browser.close();
  }
  
  // RELAT√ìRIO
  console.log('\n' + '='.repeat(60));
  console.log('üß† RELAT√ìRIO INTELIGENTE - SISTEMA MIGRADO');
  console.log('='.repeat(60));
  
  const successCount = TESTS.filter(t => t.success).length;
  const totalCount = TESTS.length;
  const successRate = ((successCount / totalCount) * 100).toFixed(1);
  
  console.log(`\n‚úÖ Sucessos: ${successCount}/${totalCount} (${successRate}%)`);
  console.log(`‚ùå Falhas: ${totalCount - successCount}/${totalCount}\n`);
  
  TESTS.forEach((test, index) => {
    const icon = test.success ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${index + 1}. ${test.name}`);
    
    if (!test.success && test.error) {
      console.log(`   ‚ö†Ô∏è  ${test.error}`);
    }
    
    if (test.data) {
      console.log(`   üìä ${JSON.stringify(test.data)}`);
    }
  });
  
  console.log('\n' + '='.repeat(60));
  
  if (successRate >= 80) {
    console.log('üéâ SISTEMA FUNCIONANDO MUITO BEM! (>80% sucesso)');
    console.log('‚úÖ Migra√ß√£o API-First foi um SUCESSO!');
  } else if (successRate >= 60) {
    console.log('‚ö†Ô∏è  SISTEMA FUNCIONANDO COM PROBLEMAS MENORES (60-80% sucesso)');
    console.log('üîß Alguns ajustes necess√°rios, mas migra√ß√£o OK!');
  } else {
    console.log('üö® SISTEMA COM PROBLEMAS CR√çTICOS (<60% sucesso)');
    console.log('üõ†Ô∏è  Migra√ß√£o precisa de corre√ß√µes importantes!');
  }
  
  console.log('='.repeat(60));
}

runSmartTests().catch(console.error);
