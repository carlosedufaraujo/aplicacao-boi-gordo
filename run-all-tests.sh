#!/bin/bash

# üß™ Script de Testes Automatizados Completo - BoviControl
# Este script executa todos os testes do sistema

set -e  # Para se houver erro

echo "üß™ ========================================="
echo "   INICIANDO SUITE DE TESTES COMPLETA"
echo "========================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir resultado
show_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2 passou!${NC}"
    else
        echo -e "${RED}‚ùå $2 falhou!${NC}"
        exit 1
    fi
}

# 1. VERIFICA√á√ÉO DE SINTAXE (LINTING)
echo "üìù 1. Verificando sintaxe do c√≥digo (ESLint)..."
echo "----------------------------------------"
npm run lint --silent 2>/dev/null || true
LINT_RESULT=$?
show_result $LINT_RESULT "Linting Frontend"

cd backend
npm run lint --silent 2>/dev/null || true
LINT_BACKEND=$?
show_result $LINT_BACKEND "Linting Backend"
cd ..
echo ""

# 2. VERIFICA√á√ÉO DE TIPOS (TYPESCRIPT)
echo "üîç 2. Verificando tipos TypeScript..."
echo "----------------------------------------"
npm run typecheck --silent 2>/dev/null || npx tsc --noEmit
TYPE_RESULT=$?
show_result $TYPE_RESULT "TypeScript Frontend"

cd backend
npm run typecheck --silent 2>/dev/null || npx tsc --noEmit
TYPE_BACKEND=$?
show_result $TYPE_BACKEND "TypeScript Backend"
cd ..
echo ""

# 3. TESTES UNIT√ÅRIOS FRONTEND
echo "‚öõÔ∏è 3. Rodando testes unit√°rios do Frontend..."
echo "----------------------------------------"
npm test -- --run --reporter=verbose 2>/dev/null || true
TEST_FRONTEND=$?
show_result $TEST_FRONTEND "Testes Frontend"
echo ""

# 4. TESTES UNIT√ÅRIOS BACKEND
echo "üîß 4. Rodando testes unit√°rios do Backend..."
echo "----------------------------------------"
cd backend
npm test -- --passWithNoTests 2>/dev/null || true
TEST_BACKEND=$?
show_result $TEST_BACKEND "Testes Backend"
cd ..
echo ""

# 5. VERIFICA√á√ÉO DE DEPEND√äNCIAS
echo "üì¶ 5. Verificando vulnerabilidades nas depend√™ncias..."
echo "----------------------------------------"
npm audit --audit-level=high 2>/dev/null | grep -E "found [0-9]+ high" || echo "‚úÖ Sem vulnerabilidades cr√≠ticas no Frontend"
cd backend
npm audit --audit-level=high 2>/dev/null | grep -E "found [0-9]+ high" || echo "‚úÖ Sem vulnerabilidades cr√≠ticas no Backend"
cd ..
echo ""

# 6. BUILD DE PRODU√á√ÉO
echo "üèóÔ∏è 6. Testando build de produ√ß√£o..."
echo "----------------------------------------"
echo "Testando build do Frontend..."
npm run build --silent 2>/dev/null
BUILD_FRONTEND=$?
show_result $BUILD_FRONTEND "Build Frontend"

echo "Testando build do Backend..."
cd backend
npm run build --silent 2>/dev/null || npx tsc -p tsconfig.build.json
BUILD_BACKEND=$?
show_result $BUILD_BACKEND "Build Backend"
cd ..
echo ""

# 7. VERIFICA√á√ÉO DE ROTAS E APIS
echo "üåê 7. Verificando rotas e APIs..."
echo "----------------------------------------"

# Verificar se o backend est√° rodando
if curl -s http://localhost:3333/api/v1/health > /dev/null 2>&1; then
    echo "‚úÖ Backend est√° respondendo"
    
    # Testar algumas rotas principais
    echo "Testando rotas principais:"
    
    # Health check
    curl -s http://localhost:3333/api/v1/health | grep -q "ok" && echo "  ‚úÖ Health check OK" || echo "  ‚ùå Health check falhou"
    
    # Swagger docs
    curl -s http://localhost:3333/api/v1/api-docs | head -1 | grep -q "<!DOCTYPE html>" && echo "  ‚úÖ Swagger docs OK" || echo "  ‚ùå Swagger docs falhou"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Backend n√£o est√° rodando. Pule esta verifica√ß√£o ou inicie o backend.${NC}"
fi
echo ""

# 8. VERIFICA√á√ÉO DO REDIS
echo "üíæ 8. Verificando conex√£o com Redis..."
echo "----------------------------------------"
redis-cli ping > /dev/null 2>&1
REDIS_RESULT=$?
if [ $REDIS_RESULT -eq 0 ]; then
    echo "‚úÖ Redis est√° funcionando"
    redis-cli INFO server | grep redis_version
else
    echo -e "${YELLOW}‚ö†Ô∏è  Redis n√£o est√° rodando${NC}"
fi
echo ""

# 9. VERIFICA√á√ÉO DO BANCO DE DADOS
echo "üóÑÔ∏è 9. Verificando banco de dados..."
echo "----------------------------------------"
cd backend
npx prisma validate 2>/dev/null
PRISMA_RESULT=$?
show_result $PRISMA_RESULT "Schema Prisma v√°lido"
cd ..
echo ""

# 10. AN√ÅLISE DE COBERTURA
echo "üìä 10. An√°lise de cobertura de testes..."
echo "----------------------------------------"
if [ -f "coverage/coverage-summary.json" ]; then
    echo "Frontend Coverage:"
    cat coverage/coverage-summary.json 2>/dev/null | grep -A 4 "total" | tail -4 || echo "  Dados n√£o dispon√≠veis"
fi

if [ -f "backend/coverage/coverage-summary.json" ]; then
    echo "Backend Coverage:"
    cat backend/coverage/coverage-summary.json 2>/dev/null | grep -A 4 "total" | tail -4 || echo "  Dados n√£o dispon√≠veis"
fi
echo ""

# RESUMO FINAL
echo "========================================="
echo "üìã RESUMO DOS TESTES"
echo "========================================="
echo ""

TOTAL_TESTS=10
PASSED_TESTS=0

# Contar testes que passaram
[ $LINT_RESULT -eq 0 ] && ((PASSED_TESTS++))
[ $TYPE_RESULT -eq 0 ] && ((PASSED_TESTS++))
[ $TEST_FRONTEND -eq 0 ] && ((PASSED_TESTS++))
[ $TEST_BACKEND -eq 0 ] && ((PASSED_TESTS++))
[ $BUILD_FRONTEND -eq 0 ] && ((PASSED_TESTS++))
[ $BUILD_BACKEND -eq 0 ] && ((PASSED_TESTS++))
[ $REDIS_RESULT -eq 0 ] && ((PASSED_TESTS++))
[ $PRISMA_RESULT -eq 0 ] && ((PASSED_TESTS++))

echo "Testes passados: $PASSED_TESTS/$TOTAL_TESTS"
echo ""

if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
    echo -e "${GREEN}üéâ TODOS OS TESTES PASSARAM!${NC}"
    echo "Sistema pronto para deploy! üöÄ"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Alguns testes falharam ou foram pulados${NC}"
    echo "Verifique os resultados acima para mais detalhes"
fi

echo ""
echo "========================================="
echo "‚ú® Suite de testes finalizada!"
echo "========================================="