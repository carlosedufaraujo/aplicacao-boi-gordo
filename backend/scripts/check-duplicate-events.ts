#!/usr/bin/env tsx
/**
 * Script para verificar e limpar eventos duplicados no calendário
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkDuplicateEvents() {
  console.log('🔍 Verificando eventos duplicados no calendário...\n');

  try {
    // Buscar todos os eventos
    const allEvents = await prisma.calendarEvent.findMany({
      orderBy: { createdAt: 'asc' }
    });

    console.log(`📊 Total de eventos: ${allEvents.length}`);

    // Agrupar eventos por título e data
    const eventGroups = new Map<string, typeof allEvents>();
    
    for (const event of allEvents) {
      const key = `${event.title}_${event.date.toISOString().split('T')[0]}`;
      if (!eventGroups.has(key)) {
        eventGroups.set(key, []);
      }
      eventGroups.get(key)!.push(event);
    }

    // Encontrar duplicados
    const duplicates: string[] = [];
    console.log('\n🔍 Eventos duplicados encontrados:');
    
    for (const [key, events] of eventGroups.entries()) {
      if (events.length > 1) {
        console.log(`\n📌 "${events[0].title}" em ${events[0].date.toLocaleDateString('pt-BR')}:`);
        console.log(`   Quantidade: ${events.length} eventos`);
        
        events.forEach((event, index) => {
          console.log(`   ${index + 1}. ID: ${event.id}`);
          console.log(`      Criado em: ${event.createdAt.toLocaleString('pt-BR')}`);
          console.log(`      Auto-gerado: ${event.autoGenerated ? 'Sim' : 'Não'}`);
          console.log(`      Related ID: ${event.relatedId || 'N/A'}`);
          console.log(`      Valor: ${event.amount ? new Intl.NumberFormat('pt-BR', { 
            style: 'currency', 
            currency: 'BRL' 
          }).format(event.amount) : 'N/A'}`);
        });

        // Guardar IDs dos duplicados para remover (manter o mais antigo)
        const [toKeep, ...toRemove] = events.sort((a, b) => 
          a.createdAt.getTime() - b.createdAt.getTime()
        );
        duplicates.push(...toRemove.map(e => e.id));
      }
    }

    if (duplicates.length === 0) {
      console.log('\n✅ Nenhum evento duplicado encontrado!');
      return;
    }

    // Perguntar se deseja remover
    console.log(`\n⚠️  Total de eventos duplicados a remover: ${duplicates.length}`);
    console.log('Removendo duplicados automaticamente (mantendo o mais antigo de cada grupo)...\n');

    // Remover duplicados
    for (const id of duplicates) {
      await prisma.calendarEvent.delete({
        where: { id }
      });
      console.log(`🗑️  Removido evento duplicado: ${id}`);
    }

    console.log(`\n✅ ${duplicates.length} eventos duplicados removidos com sucesso!`);

    // Verificar resultado final
    const finalCount = await prisma.calendarEvent.count();
    console.log(`\n📊 Total de eventos após limpeza: ${finalCount}`);

  } catch (error) {
    console.error('❌ Erro durante a verificação:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar verificação
checkDuplicateEvents()
  .then(() => {
    console.log('\n✨ Verificação concluída!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('❌ Erro fatal:', error);
    process.exit(1);
  });