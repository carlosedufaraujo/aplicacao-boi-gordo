#!/usr/bin/env tsx
/**
 * Script para sincronizar movimentações de Cash Flow existentes com o Calendário
 * Este script criará eventos no calendário para todas as movimentações que ainda não possuem eventos
 */

import { PrismaClient } from '@prisma/client';
import { CalendarEventService } from '../src/services/calendarEvent.service';

const prisma = new PrismaClient();
const calendarEventService = new CalendarEventService();

async function syncCashFlowWithCalendar() {
  console.log('🔄 Iniciando sincronização de Cash Flow com Calendário...\n');

  try {
    // Buscar todas as movimentações de cash flow
    const cashFlows = await prisma.cashFlow.findMany({
      orderBy: { createdAt: 'asc' }
    });

    console.log(`📊 Total de movimentações encontradas: ${cashFlows.length}`);

    // Buscar eventos existentes para evitar duplicação
    const existingEvents = await calendarEventService.findEvents({ type: 'FINANCE' });
    const existingRelatedIds = new Set(existingEvents.map(e => e.relatedId).filter(Boolean));
    
    console.log(`📅 Eventos já existentes no calendário: ${existingEvents.length}`);

    let created = 0;
    let skipped = 0;
    let errors = 0;

    for (const cashFlow of cashFlows) {
      // Verificar se já existe evento para este cash flow
      if (existingRelatedIds.has(cashFlow.id)) {
        console.log(`⏭️  Pulando: ${cashFlow.description} (já possui evento)`);
        skipped++;
        continue;
      }

      try {
        // Preparar dados do evento
        const eventDate = cashFlow.dueDate || cashFlow.date;
        const eventTitle = cashFlow.type === 'INCOME' 
          ? `💰 Receita: ${cashFlow.description}`
          : `💸 Despesa: ${cashFlow.description}`;
        
        const eventColor = cashFlow.type === 'INCOME' ? '#10b981' : '#ef4444';
        const eventStatus = (cashFlow.status === 'PAID' || cashFlow.status === 'RECEIVED') 
          ? 'COMPLETED' 
          : 'SCHEDULED';

        // Criar evento no calendário
        const event = await calendarEventService.createEvent({
          title: eventTitle,
          description: `${cashFlow.type === 'INCOME' ? 'Receita' : 'Despesa'}: ${new Intl.NumberFormat('pt-BR', { 
            style: 'currency', 
            currency: 'BRL' 
          }).format(cashFlow.amount)}\n${cashFlow.notes || ''}`,
          type: 'FINANCE',
          date: new Date(eventDate),
          status: eventStatus,
          priority: cashFlow.amount > 10000 ? 'HIGH' : 'MEDIUM',
          tags: ['financeiro', cashFlow.type.toLowerCase(), 'sincronizado'],
          color: eventColor,
          relatedId: cashFlow.id,
          amount: cashFlow.amount,
          autoGenerated: true,
          userId: cashFlow.userId
        });

        console.log(`✅ Criado evento para: ${cashFlow.description}`);
        created++;
      } catch (error) {
        console.error(`❌ Erro ao criar evento para: ${cashFlow.description}`, error);
        errors++;
      }
    }

    console.log('\n📊 === RESUMO DA SINCRONIZAÇÃO ===');
    console.log(`✅ Eventos criados: ${created}`);
    console.log(`⏭️  Movimentações puladas (já tinham evento): ${skipped}`);
    console.log(`❌ Erros encontrados: ${errors}`);
    console.log(`📅 Total de eventos no calendário agora: ${existingEvents.length + created}`);

    // Verificar integridade
    const finalEvents = await calendarEventService.findEvents({ type: 'FINANCE' });
    const cashFlowsWithoutEvents = cashFlows.filter(cf => 
      !finalEvents.some(e => e.relatedId === cf.id)
    );

    if (cashFlowsWithoutEvents.length > 0) {
      console.log(`\n⚠️  Ainda existem ${cashFlowsWithoutEvents.length} movimentações sem eventos no calendário.`);
      console.log('Movimentações sem eventos:');
      cashFlowsWithoutEvents.forEach(cf => {
        console.log(`  - ${cf.description} (ID: ${cf.id})`);
      });
    } else {
      console.log('\n✅ Todas as movimentações agora possuem eventos no calendário!');
    }

  } catch (error) {
    console.error('❌ Erro durante a sincronização:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar sincronização
syncCashFlowWithCalendar()
  .then(() => {
    console.log('\n✨ Sincronização concluída com sucesso!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('❌ Erro fatal:', error);
    process.exit(1);
  });