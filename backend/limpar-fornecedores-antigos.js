const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Lista dos 22 fornecedores que devem ser MANTIDOS
const fornecedoresParaManter = [
  "LAURENTINO FERNANDES BATISTA",
  "ADIO SOUZA DA SILVA",
  "JONAS BARBOSA DE SOUZA",
  "SIDNEY PEREIRA LIMA",
  "GUILHERME ANDALO MACIEL",
  "LUAN MIRANDA COSTA",
  "GIOVANI GON√áALVES",
  "AMAURI ROQUE FERREIRA",
  "VITOR BARBOSA DA SILVA",
  "MARCELO DE SOUZA",
  "MARCOS PAULO GARCIA DE SOUZA",
  "JOSINALDO MATIAS DE OLIVEIRA",
  "ELIANE APARECIDA BARBOSA BORGES",
  "GILMAR LUIZ DA COSTA",
  "EDSON RODRIGUES DOS SANTOS",
  "ALESSANDRO CARVALHO DE SOUZA",
  "LUIS FELIPE CUNHA ANDRADE",
  "LUIZ FELIPE CUNHA DE ANDRADE",
  "LICIA MARIA VIDAL DE SOUZA",
  "RODINELLI FERNANDES DA SILVA",
  "RAFAEL MACHADO MEDEIROS",
  "WELBE CARLOS DA COSTA SILVA"
];

async function limparFornecedoresAntigos() {
  console.log('üßπ Iniciando limpeza de fornecedores antigos...\n');
  
  try {
    // Buscar todos os fornecedores do tipo VENDOR
    const todosFornecedores = await prisma.partner.findMany({
      where: { type: 'VENDOR' },
      select: { id: true, name: true }
    });
    
    console.log(`üìä Total de fornecedores encontrados: ${todosFornecedores.length}`);
    
    // Filtrar fornecedores para excluir (que N√ÉO est√£o na lista para manter)
    const fornecedoresParaExcluir = todosFornecedores.filter(f => 
      !fornecedoresParaManter.includes(f.name.toUpperCase()) &&
      !fornecedoresParaManter.includes(f.name)
    );
    
    console.log(`üóëÔ∏è  Fornecedores a serem exclu√≠dos: ${fornecedoresParaExcluir.length}`);
    console.log(`‚úÖ Fornecedores a serem mantidos: ${todosFornecedores.length - fornecedoresParaExcluir.length}\n`);
    
    if (fornecedoresParaExcluir.length > 0) {
      console.log('Excluindo fornecedores antigos:');
      console.log('================================');
      
      for (const fornecedor of fornecedoresParaExcluir) {
        try {
          await prisma.partner.delete({
            where: { id: fornecedor.id }
          });
          console.log(`‚ùå Exclu√≠do: ${fornecedor.name}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Erro ao excluir ${fornecedor.name}: ${error.message}`);
        }
      }
      
      console.log('\n================================');
      console.log(`‚úÖ Processo conclu√≠do!`);
      console.log(`   - ${fornecedoresParaExcluir.length} fornecedores exclu√≠dos`);
      console.log(`   - ${todosFornecedores.length - fornecedoresParaExcluir.length} fornecedores mantidos`);
    } else {
      console.log('‚ú® Nenhum fornecedor antigo para excluir!');
    }
    
    // Listar fornecedores restantes
    const fornecedoresRestantes = await prisma.partner.findMany({
      where: { type: 'VENDOR' },
      orderBy: { name: 'asc' }
    });
    
    console.log('\nüìã Fornecedores no sistema ap√≥s limpeza:');
    console.log('========================================');
    fornecedoresRestantes.forEach((f, index) => {
      console.log(`${index + 1}. ${f.name}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error);
  }
}

// Executar limpeza
limparFornecedoresAntigos()
  .catch(console.error)
  .finally(async () => {
    await prisma.$disconnect();
    console.log('\n‚ú® Conex√£o com banco de dados encerrada!');
  });