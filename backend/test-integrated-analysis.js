// Teste da Nova Estrutura Financeira Integrada
async function testIntegratedAnalysis() {
  console.log('=== TESTE DA AN√ÅLISE FINANCEIRA INTEGRADA ===\n');
  
  try {
    // Fazer login primeiro para obter token
    const loginResponse = await fetch('http://localhost:3001/api/v1/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'admin@boicontrol.com',
        password: 'admin123'
      })
    });
    
    const loginData = await loginResponse.json();
    
    if (!loginData.token) {
      console.log('‚ùå Falha no login. Testando sem autentica√ß√£o...');
      return;
    }
    
    const token = loginData.token;
    console.log('‚úÖ Login realizado com sucesso!\n');
    
    // Testar gera√ß√£o de an√°lise
    console.log('üìä Gerando an√°lise integrada para setembro/2025...\n');
    
    const generateResponse = await fetch('http://localhost:3001/api/v1/integrated-analysis/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        year: 2025,
        month: 9,
        includeNonCashItems: true
      })
    });
    
    if (!generateResponse.ok) {
      console.log(`‚ùå Erro ao gerar an√°lise: ${generateResponse.status} ${generateResponse.statusText}`);
      const error = await generateResponse.text();
      console.log('Resposta:', error);
      return;
    }
    
    const generateData = await generateResponse.json();
    console.log('‚úÖ An√°lise gerada com sucesso!');
    console.log(`üìà Receita Total: R$ ${generateData.data.totalRevenue.toFixed(2)}`);
    console.log(`üìâ Despesas Total: R$ ${generateData.data.totalExpenses.toFixed(2)}`);
    console.log(`üí∞ Resultado L√≠quido: R$ ${generateData.data.netIncome.toFixed(2)}`);
    console.log(`üí∏ Fluxo de Caixa L√≠quido: R$ ${generateData.data.netCashFlow.toFixed(2)}`);
    console.log(`üîç Diferen√ßa de Reconcilia√ß√£o: R$ ${generateData.data.reconciliationDifference.toFixed(2)}\n`);
    
    // Testar busca por per√≠odo
    console.log('üîç Buscando an√°lise por per√≠odo...\n');
    
    const periodResponse = await fetch('http://localhost:3001/api/v1/integrated-analysis/period/2025/9', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (periodResponse.ok) {
      const periodData = await periodResponse.json();
      console.log('‚úÖ An√°lise por per√≠odo encontrada!');
      
      // Mostrar breakdown de fluxo de caixa
      const cf = periodData.data.cashFlowBreakdown;
      console.log('\nüíπ FLUXO DE CAIXA POR ATIVIDADE:');
      console.log(`  Operacionais: Entradas R$ ${cf.operating.receipts.toFixed(2)} | Sa√≠das R$ ${cf.operating.payments.toFixed(2)} | L√≠quido R$ ${cf.operating.net.toFixed(2)}`);
      console.log(`  Investimento: Entradas R$ ${cf.investing.receipts.toFixed(2)} | Sa√≠das R$ ${cf.investing.payments.toFixed(2)} | L√≠quido R$ ${cf.investing.net.toFixed(2)}`);
      console.log(`  Financiamento: Entradas R$ ${cf.financing.receipts.toFixed(2)} | Sa√≠das R$ ${cf.financing.payments.toFixed(2)} | L√≠quido R$ ${cf.financing.net.toFixed(2)}`);
      
      // Mostrar breakdown n√£o-caixa
      const nc = periodData.data.nonCashBreakdown;
      console.log('\nüìä ITENS N√ÉO-CAIXA:');
      console.log(`  Deprecia√ß√£o: R$ ${nc.depreciation.toFixed(2)}`);
      console.log(`  Mortalidade: R$ ${nc.mortality.toFixed(2)}`);
      console.log(`  Ajustes Biol√≥gicos: R$ ${nc.biologicalAdjustments.toFixed(2)}`);
      console.log(`  Outros: R$ ${nc.other.toFixed(2)}`);
      
      // Mostrar reconcilia√ß√£o
      const rec = periodData.data.reconciliation;
      console.log('\nüîÑ RECONCILIA√á√ÉO DRE x FLUXO DE CAIXA:');
      console.log(`  Resultado Cont√°bil: R$ ${rec.netIncome.toFixed(2)}`);
      console.log(`  (-) Ajustes N√£o-Caixa: R$ ${rec.nonCashAdjustments.toFixed(2)}`);
      console.log(`  (=) Fluxo de Caixa L√≠quido: R$ ${rec.netCashFlow.toFixed(2)}`);
      console.log(`  Diferen√ßa: R$ ${rec.difference.toFixed(2)}`);
      
    } else {
      console.log('‚ùå Erro ao buscar an√°lise por per√≠odo');
    }
    
    // Testar dashboard
    console.log('\nüìã Buscando dashboard do ano 2025...\n');
    
    const dashboardResponse = await fetch('http://localhost:3001/api/v1/integrated-analysis/dashboard/2025', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (dashboardResponse.ok) {
      const dashboardData = await dashboardResponse.json();
      console.log('‚úÖ Dashboard carregado com sucesso!');
      
      const summary = dashboardData.data.summary;
      console.log('\nüìä RESUMO ANUAL:');
      console.log(`  Receita Total: R$ ${summary.totalRevenue.toFixed(2)}`);
      console.log(`  Despesas Total: R$ ${summary.totalExpenses.toFixed(2)}`);
      console.log(`  Resultado L√≠quido: R$ ${summary.totalNetIncome.toFixed(2)}`);
      console.log(`  Fluxo de Caixa Total: R$ ${summary.totalCashFlow.toFixed(2)}`);
      console.log(`  Margem L√≠quida: ${summary.netMargin.toFixed(1)}%`);
      console.log(`  Margem de Caixa: ${summary.cashFlowMargin.toFixed(1)}%`);
      
      const quality = dashboardData.data.qualityMetrics;
      console.log('\nüéØ M√âTRICAS DE QUALIDADE:');
      console.log(`  Taxa de Convers√£o Caixa: ${(quality.cashConversionRate * 100).toFixed(1)}%`);
      console.log(`  Por√ß√£o N√£o-Caixa: ${(quality.nonCashPortion * 100).toFixed(1)}%`);
      console.log(`  Precis√£o da Reconcilia√ß√£o: ${(quality.reconciliationAccuracy * 100).toFixed(1)}%`);
      
    } else {
      console.log('‚ùå Erro ao buscar dashboard');
    }
    
    console.log('\n‚úÖ Todos os testes da estrutura integrada conclu√≠dos com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro ao testar estrutura integrada:', error.message);
  }
}

testIntegratedAnalysis();