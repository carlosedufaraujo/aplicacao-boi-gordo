const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function limparDespesasOrfas() {
  console.log('üßπ Iniciando limpeza de despesas √≥rf√£s...\n');
  
  try {
    // Verificar quantas despesas √≥rf√£s existem
    const despesasOrfas = await prisma.expense.findMany({
      where: { purchaseId: null },
      select: {
        id: true,
        category: true,
        description: true,
        totalAmount: true,
        createdAt: true
      }
    });
    
    console.log(`üìä Total de despesas √≥rf√£s encontradas: ${despesasOrfas.length}`);
    
    if (despesasOrfas.length > 0) {
      console.log('\nüìã Despesas √≥rf√£s encontradas:');
      console.log('================================================');
      
      despesasOrfas.forEach((despesa, i) => {
        console.log(`${i+1}. ${despesa.category} - ${despesa.description}`);
        console.log(`   R$ ${despesa.totalAmount} - ${despesa.createdAt.toISOString().split('T')[0]}`);
      });
      
      console.log('\nüóëÔ∏è  Removendo despesas √≥rf√£s...');
      
      // Primeiro remover aloca√ß√µes de despesas √≥rf√£s
      const expenseIds = despesasOrfas.map(d => d.id);
      
      console.log('   1. Removendo aloca√ß√µes de despesas...');
      await prisma.expenseAllocation.deleteMany({
        where: { expenseId: { in: expenseIds } }
      }).catch(() => {}); // Ignora erro se n√£o tiver aloca√ß√µes
      
      console.log('   2. Removendo despesas...');
      const result = await prisma.expense.deleteMany({
        where: { purchaseId: null }
      });
      
      console.log(`‚úÖ ${result.count} despesas √≥rf√£s removidas com sucesso!`);
    } else {
      console.log('‚ú® Nenhuma despesa √≥rf√£ encontrada!');
    }
    
    // Verificar o estado final
    const totalDespesas = await prisma.expense.count();
    const totalCompras = await prisma.cattlePurchase.count();
    
    console.log('\nüìã Resumo final:');
    console.log('================');
    console.log(`Total de despesas no sistema: ${totalDespesas}`);
    console.log(`Total de compras no sistema: ${totalCompras}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error);
  }
}

// Executar limpeza
limparDespesasOrfas()
  .catch(console.error)
  .finally(async () => {
    await prisma.$disconnect();
    console.log('\n‚ú® Conex√£o com banco de dados encerrada!');
  });