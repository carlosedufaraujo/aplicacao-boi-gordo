const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * Script para garantir que o c√°lculo do valor da compra
 * sempre use o rendimento de carca√ßa correto (50% padr√£o)
 * e evite a diverg√™ncia de 4%
 */

async function fixCarcassYieldCalculation() {
  try {
    console.log('üîç Verificando e corrigindo c√°lculos de rendimento de carca√ßa...\n');
    
    const purchases = await prisma.cattlePurchase.findMany({
      orderBy: { createdAt: 'asc' }
    });
    
    console.log(`Total de compras: ${purchases.length}\n`);
    
    let divergencias = 0;
    let corrigidas = 0;
    
    for (const purchase of purchases) {
      // Usar rendimento de 50% se n√£o estiver definido
      const rendimento = purchase.carcassYield || 50;
      
      // Calcular o valor correto
      const pesoCarcaca = (purchase.purchaseWeight * rendimento) / 100;
      const arrobas = pesoCarcaca / 15;
      const valorCorreto = arrobas * purchase.pricePerArroba;
      
      // Verificar diverg√™ncia
      const diferenca = Math.abs(purchase.purchaseValue - valorCorreto);
      const percentualDiferenca = (diferenca / valorCorreto) * 100;
      
      if (percentualDiferenca > 0.1) { // Toler√¢ncia de 0.1%
        divergencias++;
        console.log(`‚ö†Ô∏è Diverg√™ncia encontrada no lote ${purchase.lotCode}:`);
        console.log(`   Valor atual: R$ ${purchase.purchaseValue.toFixed(2)}`);
        console.log(`   Valor correto: R$ ${valorCorreto.toFixed(2)}`);
        console.log(`   Diferen√ßa: R$ ${diferenca.toFixed(2)} (${percentualDiferenca.toFixed(2)}%)`);
        console.log(`   Rendimento: ${rendimento}%`);
        
        // Verificar se a diverg√™ncia √© pr√≥xima de 4% (indicativo de uso de 52% ao inv√©s de 50%)
        if (Math.abs(percentualDiferenca - 4) < 0.5) {
          console.log(`   üî¥ Poss√≠vel uso incorreto de 52% de rendimento!`);
          
          // Recalcular com 50% para confirmar
          const valorCom50 = ((purchase.purchaseWeight * 50) / 100 / 15) * purchase.pricePerArroba;
          console.log(`   Se usar 50%: R$ ${valorCom50.toFixed(2)}`);
        }
        
        // Corrigir o valor no banco
        if (purchase.carcassYield === null || purchase.carcassYield === undefined) {
          await prisma.cattlePurchase.update({
            where: { id: purchase.id },
            data: {
              carcassYield: 50,
              purchaseValue: valorCorreto,
              totalCost: valorCorreto + (purchase.freightCost || 0) + (purchase.commission || 0)
            }
          });
          corrigidas++;
          console.log(`   ‚úÖ Corrigido!\n`);
        }
      }
    }
    
    console.log('\n=== RESUMO ===');
    console.log(`Total de compras analisadas: ${purchases.length}`);
    console.log(`Diverg√™ncias encontradas: ${divergencias}`);
    console.log(`Compras corrigidas: ${corrigidas}`);
    
    if (divergencias === 0) {
      console.log('\n‚úÖ Todos os c√°lculos est√£o corretos!');
    } else if (corrigidas > 0) {
      console.log(`\n‚úÖ ${corrigidas} compras foram corrigidas com sucesso!`);
    }
    
    // Valida√ß√£o final
    console.log('\nüìä VALIDA√á√ÉO FINAL:');
    const totais = await prisma.cattlePurchase.aggregate({
      _sum: {
        purchaseValue: true,
        commission: true
      }
    });
    
    console.log(`Valor total das compras: R$ ${totais._sum.purchaseValue?.toFixed(2) || '0.00'}`);
    console.log(`Total de comiss√µes: R$ ${totais._sum.commission?.toFixed(2) || '0.00'}`);
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Adicionar valida√ß√£o no service para prevenir o problema
console.log('üí° RECOMENDA√á√ÉO PARA PREVENIR O PROBLEMA:\n');
console.log('No arquivo backend/src/services/cattlePurchase.service.ts, certifique-se de que:');
console.log('1. O rendimento padr√£o seja sempre 50% quando n√£o informado');
console.log('2. O c√°lculo use exatamente: (peso * rendimento / 100) / 15 * precoArroba');
console.log('3. N√£o haja arredondamentos intermedi√°rios que causem diverg√™ncias\n');

fixCarcassYieldCalculation();