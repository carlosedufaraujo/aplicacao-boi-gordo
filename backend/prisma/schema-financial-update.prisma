// Adicionar ao schema.prisma existente

// Enum para categorias de centro de custo
enum CostCenterCategory {
  // Operacionais
  CATTLE_PURCHASE    // Compra de Gado
  CATTLE_FEED        // Alimentação
  VETERINARY         // Veterinário
  MEDICINE           // Medicamentos
  VACCINE            // Vacinas
  TRANSPORT          // Transporte
  LABOR              // Mão de obra
  COMMISSION         // Comissões
  
  // Administrativos
  ADMINISTRATIVE     // Administrativo
  FINANCIAL          // Financeiro
  MARKETING          // Marketing
  LEGAL              // Jurídico
  ACCOUNTING         // Contabilidade
  
  // Infraestrutura
  INFRASTRUCTURE     // Infraestrutura
  MAINTENANCE        // Manutenção
  UTILITIES          // Utilidades (água, luz)
  EQUIPMENT          // Equipamentos
  
  // Receitas
  CATTLE_SALE        // Venda de Gado
  OTHER_REVENUE      // Outras Receitas
}

// Enum para métodos de rateio
enum AllocationMethod {
  GLOBAL             // Divide igualmente entre todos os lotes
  PER_LOT            // Aloca para lotes específicos
  PER_PEN            // Aloca para currais específicos
  PER_ANIMAL         // Divide pelo número de animais
  BY_WEIGHT          // Proporcional ao peso
  BY_VALUE           // Proporcional ao valor
  CUSTOM             // Percentuais customizados
}

// Enum para modalidades de pagamento
enum PaymentMethod {
  CASH               // Dinheiro
  BANK_TRANSFER      // Transferência
  CHECK              // Cheque
  CREDIT_CARD        // Cartão de Crédito
  DEBIT_CARD         // Cartão de Débito
  PIX                // PIX
  BOLETO             // Boleto
  FINANCING          // Financiamento
  BARTER             // Troca
  OTHER              // Outros
}

// Atualizar modelo CostCenter
model CostCenter {
  id                String               @id @default(cuid())
  code              String               @unique
  name              String
  category          CostCenterCategory
  type              CostCenterType
  parentId          String?
  
  // Regras de alocação
  allocationMethod  AllocationMethod     @default(GLOBAL)
  defaultPercentage Float?
  
  // Orçamento
  monthlyBudget     Float?
  annualBudget      Float?
  
  // Metadados
  description       String?
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  // Relacionamentos
  parent            CostCenter?          @relation("CostCenterHierarchy", fields: [parentId], references: [id])
  children          CostCenter[]         @relation("CostCenterHierarchy")
  expenses          Expense[]
  revenues          Revenue[]
  allocations       CostCenterAllocation[]

  @@map("cost_centers")
}

// Nova tabela para alocações específicas de centro de custo
model CostCenterAllocation {
  id             String           @id @default(cuid())
  costCenterId   String
  entityType     AllocationEntity
  entityId       String
  percentage     Float
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  
  costCenter     CostCenter       @relation(fields: [costCenterId], references: [id])
  
  @@unique([costCenterId, entityType, entityId])
  @@map("cost_center_allocations")
}

// Atualizar modelo Expense com mais campos
model Expense {
  id              String               @id @default(cuid())
  
  // Categorização
  category        String
  costCenterId    String?
  subcategory     String?
  
  // Descrição e valores
  description     String
  totalAmount     Float
  
  // Datas
  dueDate         DateTime
  paymentDate     DateTime?
  competenceDate  DateTime             // Data de competência (quando o custo foi incorrido)
  
  // Status e pagamento
  isPaid          Boolean              @default(false)
  paymentMethod   PaymentMethod?
  
  // Flags
  impactsCashFlow Boolean              @default(true)
  isRecurring     Boolean              @default(false)
  recurringMonths Int?
  
  // Relacionamentos opcionais
  purchaseId      String?              // Lote de gado
  penId           String?              // Curral
  vendorId        String?              // Fornecedor
  payerAccountId  String?              // Conta pagadora
  interventionId  String?              // Intervenção veterinária
  saleRecordId    String?              // Venda relacionada
  
  // Rateio
  allocationMethod AllocationMethod     @default(GLOBAL)
  
  // Metadados
  userId          String
  cycleId         String?
  invoiceNumber   String?
  notes           String?
  attachments     String[]             // URLs dos anexos
  
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relacionamentos
  allocations     ExpenseAllocation[]
  costCenter      CostCenter?          @relation(fields: [costCenterId], references: [id])
  cycle           Cycle?               @relation(fields: [cycleId], references: [id])
  payerAccount    PayerAccount?        @relation(fields: [payerAccountId], references: [id])
  purchase        CattlePurchase?      @relation(fields: [purchaseId], references: [id])
  pen             Pen?                 @relation(fields: [penId], references: [id])
  vendor          Partner?             @relation(fields: [vendorId], references: [id])
  reconciliations ReconciliationItem[]

  @@index([category, isPaid])
  @@index([dueDate])
  @@index([purchaseId])
  @@map("expenses")
}

// Atualizar modelo Revenue
model Revenue {
  id              String               @id @default(cuid())
  
  // Categorização
  category        String
  costCenterId    String?
  subcategory     String?
  
  // Descrição e valores
  description     String
  totalAmount     Float
  
  // Datas
  dueDate         DateTime
  receiptDate     DateTime?
  competenceDate  DateTime             // Data de competência
  
  // Status
  isReceived      Boolean              @default(false)
  paymentMethod   PaymentMethod?
  
  // Relacionamentos
  saleRecordId    String?
  buyerId         String?
  payerAccountId  String?
  purchaseId      String?              // Lote relacionado
  
  // Rateio
  allocationMethod AllocationMethod     @default(PER_LOT)
  
  // Metadados
  cycleId         String?
  userId          String
  invoiceNumber   String?
  notes           String?
  attachments     String[]
  
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relacionamentos
  reconciliations ReconciliationItem[]
  allocations     RevenueAllocation[]
  costCenter      CostCenter?          @relation(fields: [costCenterId], references: [id])
  cycle           Cycle?               @relation(fields: [cycleId], references: [id])
  payerAccount    PayerAccount?        @relation(fields: [payerAccountId], references: [id])
  buyer           Partner?             @relation(fields: [buyerId], references: [id])
  purchase        CattlePurchase?      @relation(fields: [purchaseId], references: [id])
  saleRecord      SaleRecord?          @relation(fields: [saleRecordId], references: [id])

  @@index([category, isReceived])
  @@index([dueDate])
  @@map("revenues")
}

// Nova tabela para integração financeira automática
model FinancialIntegration {
  id              String               @id @default(cuid())
  
  // Origem da integração
  sourceType      String               // PURCHASE, SALE, INTERVENTION, FEED, etc
  sourceId        String               // ID do registro origem
  
  // Transações geradas
  expenseIds      String[]
  revenueIds      String[]
  
  // Status
  status          String               @default("PENDING") // PENDING, PROCESSED, ERROR
  errorMessage    String?
  
  // Metadados
  processedAt     DateTime?
  userId          String
  createdAt       DateTime             @default(now())
  
  @@unique([sourceType, sourceId])
  @@map("financial_integrations")
}

// Tabela para análise de rentabilidade por lote
model LotProfitability {
  id              String               @id @default(cuid())
  purchaseId      String               @unique
  
  // Custos
  purchaseCost    Float                // Custo de aquisição
  transportCost   Float                // Custo de transporte
  feedCost        Float                // Custo de alimentação
  veterinaryCost  Float                // Custos veterinários
  laborCost       Float                // Custo de mão de obra
  overheadCost    Float                // Custos indiretos rateados
  totalCost       Float                // Custo total
  
  // Receitas
  saleRevenue     Float                // Receita de venda
  otherRevenue    Float                // Outras receitas
  totalRevenue    Float                // Receita total
  
  // Resultados
  grossProfit     Float                // Lucro bruto
  netProfit       Float                // Lucro líquido
  profitMargin    Float                // Margem de lucro (%)
  roi             Float                // Retorno sobre investimento (%)
  
  // Métricas por animal
  costPerAnimal   Float
  revenuePerAnimal Float
  profitPerAnimal Float
  
  // Métricas por arroba
  costPerArroba   Float
  revenuePerArroba Float
  profitPerArroba Float
  
  // Datas
  startDate       DateTime
  endDate         DateTime?
  daysInOperation Int
  
  // Status
  status          String               // ACTIVE, SOLD, CLOSED
  
  lastCalculatedAt DateTime
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  purchase        CattlePurchase       @relation(fields: [purchaseId], references: [id])
  
  @@map("lot_profitability")
}