generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid()) @db.Uuid
  email           String           @unique
  password        String
  name            String?
  role            String?          @default("USER")
  isMaster        Boolean?         @default(false)
  isActive        Boolean?         @default(true)
  createdAt       DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?        @default(now()) @updatedAt @db.Timestamptz(6)
  cattlePurchases CattlePurchase[]

  @@map("users")
}

model Partner {
  id                    String                  @id @default(cuid())
  name                  String
  type                  PartnerType
  cpfCnpj               String?                 @unique
  phone                 String?
  email                 String?
  address               String?
  notes                 String?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  purchasesAsBroker     CattlePurchase[]        @relation("PurchaseBroker")
  purchasesAsTransport  CattlePurchase[]        @relation("PurchaseTransport")
  purchasesAsVendor     CattlePurchase[]        @relation("PurchaseVendor")
  contributions         FinancialContribution[]
  saleRecords           SaleRecord[]
  weight_break_analyses weight_break_analyses[]

  @@map("partners")
}

model PayerAccount {
  id              String                    @id @default(cuid())
  bankName        String
  accountName     String
  agency          String?
  accountNumber   String?
  accountType     AccountType
  balance         Float                     @default(0)
  isActive        Boolean                   @default(true)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  bankStatements  BankStatement[]
  cattlePurchases CattlePurchase[]
  expenses        Expense[]
  contributions   FinancialContribution[]
  reconciliations FinancialReconciliation[]
  revenues        Revenue[]

  @@map("payer_accounts")
}

model CattlePurchase {
  id                     String                       @id @default(cuid())
  lotCode                String                       @unique
  vendorId               String
  brokerId               String?
  transportCompanyId     String?
  payerAccountId         String
  userId                 String?                      @db.Uuid
  location               String?
  city                   String?
  state                  String?
  farm                   String?
  purchaseDate           DateTime
  receivedDate           DateTime?
  animalType             AnimalType                   @default(MALE)
  animalAge              Float?
  initialQuantity        Int
  currentQuantity        Int
  deathCount             Int                          @default(0)
  purchaseWeight         Float
  receivedWeight         Float?
  currentWeight          Float?
  averageWeight          Float?
  weightBreakPercentage  Float?
  carcassYield           Float                        @default(50)
  pricePerArroba         Float
  purchaseValue          Float
  freightCost            Float                        @default(0)
  freightDistance        Float?
  freightCostPerKm       Float?
  commission             Float                        @default(0)
  healthCost             Float                        @default(0)
  feedCost               Float                        @default(0)
  operationalCost        Float                        @default(0)
  totalCost              Float
  paymentType            PaymentType                  @default(CASH)
  paymentTerms           String?
  principalDueDate       DateTime?
  commissionPaymentType  String?
  commissionDueDate      DateTime?
  freightPaymentType     String?
  freightDueDate         DateTime?
  expectedGMD            Float?
  targetWeight           Float?
  estimatedSlaughterDate DateTime?
  status                 PurchaseStatus               @default(CONFIRMED)
  stage                  String?
  notes                  String?
  cycleId                String?
  transportMortality     Int?                         @default(0)
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  broker                 Partner?                     @relation("PurchaseBroker", fields: [brokerId], references: [id])
  cycle                  Cycle?                       @relation(fields: [cycleId], references: [id])
  payerAccount           PayerAccount                 @relation(fields: [payerAccountId], references: [id])
  transportCompany       Partner?                     @relation("PurchaseTransport", fields: [transportCompanyId], references: [id])
  user                   User?                        @relation(fields: [userId], references: [id])
  vendor                 Partner                      @relation("PurchaseVendor", fields: [vendorId], references: [id])
  costAllocations        CostProportionalAllocation[]
  expenses               Expense[]
  financial_accounts     financial_accounts[]
  healthRecords          HealthRecord[]
  movements              LotMovement[]
  penAllocations         LotPenLink[]
  mortality_analyses     mortality_analyses[]
  nonCashExpenses        NonCashExpense[]
  saleRecords            SaleRecord[]
  weight_break_analyses  weight_break_analyses[]
  weight_readings        WeightReading[]

  @@map("cattle_purchases")
}

model Pen {
  id                 String               @id @default(cuid())
  penNumber          String               @unique
  capacity           Int
  location           String?
  type               PenType              @default(FATTENING)
  status             PenStatus            @default(AVAILABLE)
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  feedRecords        FeedRecord[]
  healthProtocols    HealthProtocol[]
  lotAllocations     LotPenLink[]
  mortality_analyses mortality_analyses[]

  @@map("pens")
}

model LotPenLink {
  id              String         @id @default(cuid())
  purchaseId      String
  penId           String
  quantity        Int
  percentageOfLot Float
  percentageOfPen Float
  allocationDate  DateTime
  removalDate     DateTime?
  status          LinkStatus     @default(ACTIVE)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  pen             Pen            @relation(fields: [penId], references: [id])
  purchase        CattlePurchase @relation(fields: [purchaseId], references: [id])

  @@unique([purchaseId, penId, allocationDate])
  @@map("lot_pen_links")
}

model CostProportionalAllocation {
  id                  String         @id @default(cuid())
  sourceId            String
  sourceType          CostSourceType
  penId               String
  purchaseId          String
  originalValue       Float
  allocatedValue      Float
  allocatedPercentage Float
  allocationDate      DateTime
  createdAt           DateTime       @default(now())
  purchase            CattlePurchase @relation(fields: [purchaseId], references: [id])

  @@map("cost_proportional_allocations")
}

model HealthProtocol {
  id              String         @id @default(cuid())
  name            String
  type            ProtocolType
  penId           String
  applicationDate DateTime
  veterinarian    String?
  totalCost       Float
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  pen             Pen            @relation(fields: [penId], references: [id])
  healthRecords   HealthRecord[]

  @@map("health_protocols")
}

model HealthRecord {
  id            String         @id @default(cuid())
  protocolId    String
  purchaseId    String
  animalCount   Int
  costPerAnimal Float
  totalCost     Float
  userId        String
  createdAt     DateTime       @default(now())
  protocol      HealthProtocol @relation(fields: [protocolId], references: [id])
  purchase      CattlePurchase @relation(fields: [purchaseId], references: [id])

  @@map("health_records")
}

model FeedRecord {
  id        String   @id @default(cuid())
  penId     String
  feedDate  DateTime
  feedType  String
  quantity  Float
  unitCost  Float
  totalCost Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pen       Pen      @relation(fields: [penId], references: [id])

  @@map("feed_records")
}

model LotMovement {
  id           String         @id @default(cuid())
  purchaseId   String
  fromPenId    String?
  toPenId      String?
  movementType MovementType
  quantity     Int
  reason       String?
  userId       String
  movementDate DateTime
  createdAt    DateTime       @default(now())
  purchase     CattlePurchase @relation(fields: [purchaseId], references: [id])

  @@map("lot_movements")
}

model SaleRecord {
  id               String         @id @default(cuid())
  saleNumber       String         @unique
  purchaseId       String
  buyerId          String
  cycleId          String?
  designationDate  DateTime
  slaughterPlant   String
  expectedDate     DateTime
  shipmentDate     DateTime?
  shipmentWeight   Float?
  transportCompany String?
  slaughterDate    DateTime?
  slaughterWeight  Float?
  carcassYield     Float?
  pricePerArroba   Float?
  totalValue       Float?
  invoiceNumber    String?
  paymentDate      DateTime?
  status           SaleStatus     @default(NEXT_SLAUGHTER)
  userId           String
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  buyer            Partner        @relation(fields: [buyerId], references: [id])
  cycle            Cycle?         @relation(fields: [cycleId], references: [id])
  purchase         CattlePurchase @relation(fields: [purchaseId], references: [id])

  @@map("sale_records")
}

model CostCenter {
  id        String         @id @default(cuid())
  code      String         @unique
  name      String
  type      CostCenterType
  parentId  String?
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  parent    CostCenter?    @relation("CostCenterHierarchy", fields: [parentId], references: [id])
  children  CostCenter[]   @relation("CostCenterHierarchy")
  expenses  Expense[]
  revenues  Revenue[]

  @@map("cost_centers")
}

model Expense {
  id              String               @id @default(cuid())
  category        String
  costCenterId    String?
  description     String
  totalAmount     Float
  dueDate         DateTime
  paymentDate     DateTime?
  isPaid          Boolean              @default(false)
  impactsCashFlow Boolean              @default(true)
  purchaseId      String?
  penId           String?
  vendorId        String?
  payerAccountId  String?
  userId          String
  cycleId         String?
  notes           String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  allocations     ExpenseAllocation[]
  costCenter      CostCenter?          @relation(fields: [costCenterId], references: [id])
  cycle           Cycle?               @relation(fields: [cycleId], references: [id])
  payerAccount    PayerAccount?        @relation(fields: [payerAccountId], references: [id])
  purchase        CattlePurchase?      @relation(fields: [purchaseId], references: [id])
  reconciliations ReconciliationItem[]

  @@map("expenses")
}

model Revenue {
  id              String               @id @default(cuid())
  category        String
  costCenterId    String?
  description     String
  totalAmount     Float
  dueDate         DateTime
  receiptDate     DateTime?
  isReceived      Boolean              @default(false)
  saleRecordId    String?
  buyerId         String?
  payerAccountId  String?
  cycleId         String?
  userId          String
  notes           String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  reconciliations ReconciliationItem[]
  allocations     RevenueAllocation[]
  costCenter      CostCenter?          @relation(fields: [costCenterId], references: [id])
  cycle           Cycle?               @relation(fields: [cycleId], references: [id])
  payerAccount    PayerAccount?        @relation(fields: [payerAccountId], references: [id])

  @@map("revenues")
}

model NonCashExpense {
  id            String         @id @default(cuid())
  type          NonCashType
  purchaseId    String
  description   String
  quantity      Int?
  expectedValue Float?
  actualValue   Float?
  totalValue    Float
  recordDate    DateTime
  notes         String?
  createdAt     DateTime       @default(now())
  purchase      CattlePurchase @relation(fields: [purchaseId], references: [id])

  @@map("non_cash_expenses")
}

model ExpenseAllocation {
  id              String           @id @default(cuid())
  expenseId       String
  entityType      AllocationEntity
  entityId        String
  allocatedAmount Float
  percentage      Float
  createdAt       DateTime         @default(now())
  expense         Expense          @relation(fields: [expenseId], references: [id])

  @@map("expense_allocations")
}

model RevenueAllocation {
  id              String           @id @default(cuid())
  revenueId       String
  entityType      AllocationEntity
  entityId        String
  allocatedAmount Float
  percentage      Float
  createdAt       DateTime         @default(now())
  revenue         Revenue          @relation(fields: [revenueId], references: [id])

  @@map("revenue_allocations")
}

model FinancialContribution {
  id               String           @id @default(cuid())
  type             ContributionType
  partnerId        String
  payerAccountId   String
  amount           Float
  contributionDate DateTime
  description      String?
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  partner          Partner          @relation(fields: [partnerId], references: [id])
  payerAccount     PayerAccount     @relation(fields: [payerAccountId], references: [id])

  @@map("financial_contributions")
}

model BankStatement {
  id              String               @id @default(cuid())
  payerAccountId  String
  statementDate   DateTime
  description     String
  amount          Float
  balance         Float
  transactionType String
  reference       String?
  importBatchId   String?
  isReconciled    Boolean              @default(false)
  userId          String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  payerAccount    PayerAccount         @relation(fields: [payerAccountId], references: [id])
  reconciliations ReconciliationItem[]

  @@map("bank_statements")
}

model FinancialReconciliation {
  id                 String               @id @default(cuid())
  payerAccountId     String
  reconciliationDate DateTime
  status             ReconciliationStatus
  totalReconciled    Float
  userId             String
  notes              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  payerAccount       PayerAccount         @relation(fields: [payerAccountId], references: [id])
  items              ReconciliationItem[]

  @@map("financial_reconciliations")
}

model ReconciliationItem {
  id               String                        @id @default(cuid())
  reconciliationId String
  bankStatementId  String
  transactionType  ReconciliationTransactionType
  transactionId    String?
  amount           Float
  createdAt        DateTime                      @default(now())
  bankStatement    BankStatement                 @relation(fields: [bankStatementId], references: [id])
  expense          Expense?                      @relation(fields: [transactionId], references: [id], map: "reconciliation_items_expense_fkey")
  reconciliation   FinancialReconciliation       @relation(fields: [reconciliationId], references: [id])
  revenue          Revenue?                      @relation(fields: [transactionId], references: [id], map: "reconciliation_items_revenue_fkey")

  @@map("reconciliation_items")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([entity, entityId])
  @@index([userId, createdAt])
  @@map("audit_logs")
}

model Cycle {
  id              String           @id @default(cuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  status          CycleStatus      @default(PLANNED)
  budget          Float            @default(0)
  targetAnimals   Int              @default(0)
  actualAnimals   Int              @default(0)
  totalCost       Float            @default(0)
  totalRevenue    Float            @default(0)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cattlePurchases CattlePurchase[]
  expenses        Expense[]
  revenues        Revenue[]
  saleRecords     SaleRecord[]

  @@map("cycles")
}

model WeightReading {
  id               String         @id @default(cuid())
  purchaseId       String
  readingDate      DateTime
  averageWeight    Float
  totalWeight      Float
  animalCount      Int
  userId           String
  notes            String?
  createdAt        DateTime       @default(now())
  cattle_purchases CattlePurchase @relation(fields: [purchaseId], references: [id])

  @@map("weight_readings")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users_sync {
  id        String    @id @db.Uuid
  email     String    @unique
  name      String?
  role      String?   @default("USER")
  isMaster  Boolean?  @default(false)
  isActive  Boolean?  @default(true)
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
}

model financial_accounts {
  id               String                 @id
  type             AccountTransactionType
  category         String
  purchaseId       String?
  description      String
  amount           Float
  dueDate          DateTime
  paymentDate      DateTime?
  status           TransactionStatus      @default(PENDING)
  notes            String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime
  cattle_purchases CattlePurchase?        @relation(fields: [purchaseId], references: [id])
}

model mortality_analyses {
  id                   String         @id @default(dbgenerated("gen_random_uuid()"))
  cattle_purchase_id   String
  pen_id               String?
  phase                String
  mortality_date       DateTime       @db.Timestamp(6)
  quantity             Int
  average_weight       Float?
  unit_cost            Float
  total_loss           Float
  accumulated_cost     Float
  days_in_confinement  Int?
  cause                String?
  symptoms             String?
  veterinary_diagnosis String?
  treatment_attempted  Boolean?       @default(false)
  treatment_cost       Float?         @default(0)
  weather_conditions   String?
  temperature          Float?
  humidity             Float?
  notes                String?
  created_at           DateTime?      @default(now()) @db.Timestamp(6)
  updated_at           DateTime?      @default(now()) @db.Timestamp(6)
  cattle_purchases     CattlePurchase @relation(fields: [cattle_purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pens                 Pen?           @relation(fields: [pen_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([cattle_purchase_id], map: "idx_mortality_cattle")
  @@index([cause], map: "idx_mortality_cause")
  @@index([mortality_date], map: "idx_mortality_date")
  @@index([phase], map: "idx_mortality_phase")
}

model weight_break_analyses {
  id                     String         @id @default(dbgenerated("gen_random_uuid()"))
  cattle_purchase_id     String
  vendor_id              String
  vendor_state           String
  vendor_region          String
  transport_distance     Float?
  transport_company      String?
  transport_duration     Int?
  season                 String
  purchase_date          DateTime       @db.Timestamp(6)
  reception_date         DateTime       @db.Timestamp(6)
  purchase_weight        Float
  received_weight        Float
  weight_lost            Float
  break_percentage       Float
  initial_quantity       Int
  average_initial_weight Float
  average_final_weight   Float
  temperature_at_loading Float?
  temperature_at_arrival Float?
  weather_conditions     String?
  road_conditions        String?
  adjusted_unit_cost     Float
  financial_impact       Float
  notes                  String?
  created_at             DateTime?      @default(now()) @db.Timestamp(6)
  updated_at             DateTime?      @default(now()) @db.Timestamp(6)
  cattle_purchases       CattlePurchase @relation(fields: [cattle_purchase_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partners               Partner        @relation(fields: [vendor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([purchase_date], map: "idx_weight_break_date")
  @@index([vendor_region], map: "idx_weight_break_region")
  @@index([season], map: "idx_weight_break_season")
  @@index([vendor_id], map: "idx_weight_break_vendor")
}

enum PurchaseStatus {
  CONFIRMED
  RECEIVED
  CONFINED
  SOLD
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum PartnerType {
  VENDOR
  BROKER
  BUYER
  INVESTOR
  SERVICE_PROVIDER
  OTHER
  FREIGHT_CARRIER
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CASH
}

enum AnimalType {
  MALE
  FEMALE
  MIXED
}

enum PaymentType {
  CASH
  INSTALLMENT
  MIXED
}

enum PenType {
  RECEPTION
  FATTENING
  QUARANTINE
  HOSPITAL
}

enum PenStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  QUARANTINE
}

enum LinkStatus {
  ACTIVE
  REMOVED
}

enum CostSourceType {
  HEALTH
  FEED
  OPERATIONAL
  OTHER
  PURCHASE_ORDER
}

enum ProtocolType {
  VACCINATION
  MEDICATION
  EXAMINATION
  TREATMENT
  OTHER
}

enum MovementType {
  ALLOCATION
  TRANSFER
  REMOVAL
  DEATH
  SALE
}

enum SaleStatus {
  NEXT_SLAUGHTER
  SCHEDULED
  SHIPPED
  SLAUGHTERED
  RECONCILED
  CANCELLED
}

enum CostCenterType {
  ACQUISITION
  FATTENING
  ADMINISTRATIVE
  FINANCIAL
  REVENUE
  CONTRIBUTION
}

enum NonCashType {
  MORTALITY
  WEIGHT_LOSS
  DEPRECIATION
  ADJUSTMENT
  OTHER
}

enum AllocationEntity {
  LOT
  PEN
  GLOBAL
}

enum ContributionType {
  PARTNER_CONTRIBUTION
  PARTNER_LOAN
  BANK_FINANCING
  EXTERNAL_INVESTOR
}

enum AccountTransactionType {
  PAYABLE
  RECEIVABLE
}

enum TransactionStatus {
  PENDING
  PAID
  RECEIVED
  OVERDUE
  CANCELLED
}

enum ReconciliationStatus {
  DRAFT
  COMPLETED
  CANCELLED
}

enum ReconciliationTransactionType {
  EXPENSE
  REVENUE
  CONTRIBUTION
  TRANSFER
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  SALE_COMPLETED
  SYSTEM_UPDATE
  ALERT
  INFO
}

enum CycleStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}
