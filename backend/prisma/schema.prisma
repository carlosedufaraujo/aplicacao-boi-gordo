// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== USUÁRIOS E AUTENTICAÇÃO ==========

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  purchaseOrders     PurchaseOrder[]
  expenses          Expense[]
  revenues          Revenue[]
  contributions     FinancialContribution[]
  bankStatements    BankStatement[]
  reconciliations   FinancialReconciliation[]
  lotMovements      LotMovement[]
  healthRecords     HealthRecord[]
  weightReadings    WeightReading[]
  saleRecords       SaleRecord[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

// ========== PARCEIROS E CONTAS ==========

model Partner {
  id           String       @id @default(cuid())
  name         String
  type         PartnerType
  cpfCnpj      String?      @unique
  phone        String?
  email        String?
  address      String?
  notes        String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relações
  purchaseOrdersAsVendor    PurchaseOrder[] @relation("Vendor")
  purchaseOrdersAsBroker    PurchaseOrder[] @relation("Broker")
  saleRecords              SaleRecord[]
  contributions            FinancialContribution[]

  @@map("partners")
}

enum PartnerType {
  VENDOR
  BROKER
  BUYER
  INVESTOR
  SERVICE_PROVIDER
  OTHER
}

model PayerAccount {
  id          String   @id @default(cuid())
  bankName    String
  accountName String
  agency      String?
  accountNumber String?
  accountType AccountType
  balance     Float    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  purchaseOrders    PurchaseOrder[]
  expenses         Expense[]
  revenues         Revenue[]
  contributions    FinancialContribution[]
  bankStatements   BankStatement[]
  reconciliations  FinancialReconciliation[]

  @@map("payer_accounts")
}

enum AccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CASH
}

// ========== PIPELINE DE COMPRAS ==========

model PurchaseOrder {
  id               String   @id @default(cuid())
  orderNumber      String   @unique
  vendorId         String
  brokerId         String?
  userId           String
  location         String
  purchaseDate     DateTime
  
  // Dados dos animais
  animalCount      Int
  animalType       AnimalType
  averageAge       Int?
  totalWeight      Float
  averageWeight    Float
  carcassYield     Float
  
  // Valores
  pricePerArroba   Float
  totalValue       Float
  commission       Float
  freightCost      Float    @default(0)
  otherCosts       Float    @default(0)
  
  // Pagamento
  paymentType      PaymentType
  payerAccountId   String
  principalDueDate DateTime
  commissionDueDate DateTime?
  otherCostsDueDate DateTime?
  
  // Status
  status           PurchaseOrderStatus @default(PENDING)
  currentStage     String @default("order")
  
  // Recepção
  receptionDate    DateTime?
  actualWeight     Float?
  actualCount      Int?
  weightBreakPercentage Float?
  transportMortality Int?
  
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relações
  vendor           Partner  @relation("Vendor", fields: [vendorId], references: [id])
  broker           Partner? @relation("Broker", fields: [brokerId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
  payerAccount     PayerAccount @relation(fields: [payerAccountId], references: [id])
  
  lot              CattleLot?
  financialAccounts FinancialAccount[]

  @@map("purchase_orders")
}

enum AnimalType {
  MALE
  FEMALE
  MIXED
}

enum PaymentType {
  CASH
  INSTALLMENT
  MIXED
}

enum PurchaseOrderStatus {
  PENDING
  PAYMENT_VALIDATING
  RECEPTION
  CONFINED
  CANCELLED
}

// ========== LOTES E CURRAIS ==========

model CattleLot {
  id              String   @id @default(cuid())
  lotNumber       String   @unique
  purchaseOrderId String   @unique
  
  // Dados de entrada
  entryDate       DateTime
  entryWeight     Float
  entryQuantity   Int
  
  // Custos acumulados
  acquisitionCost Float    @default(0)
  healthCost      Float    @default(0)
  feedCost        Float    @default(0)
  operationalCost Float    @default(0)
  freightCost     Float    @default(0)
  otherCosts      Float    @default(0)
  totalCost       Float    @default(0)
  
  // Mortalidade
  deathCount      Int      @default(0)
  currentQuantity Int
  
  status          LotStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  penAllocations   LotPenLink[]
  movements        LotMovement[]
  healthRecords    HealthRecord[]
  weightReadings   WeightReading[]
  expenses         Expense[]
  nonCashExpenses  NonCashExpense[]
  saleRecords      SaleRecord[]
  costAllocations  CostProportionalAllocation[]

  @@map("cattle_lots")
}

enum LotStatus {
  ACTIVE
  SOLD
  CANCELLED
}

model Pen {
  id          String   @id @default(cuid())
  penNumber   String   @unique
  capacity    Int
  location    String?
  type        PenType  @default(FATTENING)
  status      PenStatus @default(AVAILABLE)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  lotAllocations   LotPenLink[]
  healthProtocols  HealthProtocol[]
  feedRecords      FeedRecord[]

  @@map("pens")
}

enum PenType {
  RECEPTION
  FATTENING
  QUARANTINE
  HOSPITAL
}

enum PenStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  QUARANTINE
}

model LotPenLink {
  id                String   @id @default(cuid())
  lotId             String
  penId             String
  quantity          Int
  percentageOfLot   Float
  percentageOfPen   Float
  allocationDate    DateTime
  removalDate       DateTime?
  status            LinkStatus @default(ACTIVE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relações
  lot               CattleLot @relation(fields: [lotId], references: [id])
  pen               Pen @relation(fields: [penId], references: [id])

  @@unique([lotId, penId, allocationDate])
  @@map("lot_pen_links")
}

enum LinkStatus {
  ACTIVE
  REMOVED
}

// ========== CUSTOS E ALOCAÇÕES ==========

model CostProportionalAllocation {
  id                String   @id @default(cuid())
  sourceId          String
  sourceType        CostSourceType
  penId             String
  lotId             String
  originalValue     Float
  allocatedValue    Float
  allocatedPercentage Float
  allocationDate    DateTime
  createdAt         DateTime @default(now())

  // Relações
  lot               CattleLot @relation(fields: [lotId], references: [id])

  @@map("cost_proportional_allocations")
}

enum CostSourceType {
  HEALTH
  FEED
  OPERATIONAL
  OTHER
}

// ========== SAÚDE E ALIMENTAÇÃO ==========

model HealthProtocol {
  id              String   @id @default(cuid())
  name            String
  type            ProtocolType
  penId           String
  applicationDate DateTime
  veterinarian    String?
  totalCost       Float
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  pen             Pen @relation(fields: [penId], references: [id])
  healthRecords   HealthRecord[]

  @@map("health_protocols")
}

enum ProtocolType {
  VACCINATION
  MEDICATION
  EXAMINATION
  TREATMENT
  OTHER
}

model HealthRecord {
  id              String   @id @default(cuid())
  protocolId      String
  lotId           String
  animalCount     Int
  costPerAnimal   Float
  totalCost       Float
  userId          String
  createdAt       DateTime @default(now())

  // Relações
  protocol        HealthProtocol @relation(fields: [protocolId], references: [id])
  lot             CattleLot @relation(fields: [lotId], references: [id])
  user            User @relation(fields: [userId], references: [id])

  @@map("health_records")
}

model FeedRecord {
  id              String   @id @default(cuid())
  penId           String
  feedDate        DateTime
  feedType        String
  quantity        Float
  unitCost        Float
  totalCost       Float
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  pen             Pen @relation(fields: [penId], references: [id])

  @@map("feed_records")
}

// ========== MOVIMENTAÇÕES E PESAGENS ==========

model LotMovement {
  id              String   @id @default(cuid())
  lotId           String
  fromPenId       String?
  toPenId         String?
  movementType    MovementType
  quantity        Int
  reason          String?
  userId          String
  movementDate    DateTime
  createdAt       DateTime @default(now())

  // Relações
  lot             CattleLot @relation(fields: [lotId], references: [id])
  user            User @relation(fields: [userId], references: [id])

  @@map("lot_movements")
}

enum MovementType {
  ALLOCATION
  TRANSFER
  REMOVAL
  DEATH
  SALE
}

model WeightReading {
  id              String   @id @default(cuid())
  lotId           String
  readingDate     DateTime
  averageWeight   Float
  totalWeight     Float
  animalCount     Int
  userId          String
  notes           String?
  createdAt       DateTime @default(now())

  // Relações
  lot             CattleLot @relation(fields: [lotId], references: [id])
  user            User @relation(fields: [userId], references: [id])

  @@map("weight_readings")
}

// ========== PIPELINE DE VENDAS ==========

model SaleRecord {
  id                String   @id @default(cuid())
  saleNumber        String   @unique
  lotId             String
  buyerId           String
  
  // Designação
  designationDate   DateTime
  slaughterPlant    String
  expectedDate      DateTime
  
  // Embarque
  shipmentDate      DateTime?
  shipmentWeight    Float?
  transportCompany  String?
  
  // Abate
  slaughterDate     DateTime?
  slaughterWeight   Float?
  carcassYield      Float?
  
  // Financeiro
  pricePerArroba    Float?
  totalValue        Float?
  invoiceNumber     String?
  paymentDate       DateTime?
  
  status            SaleStatus @default(NEXT_SLAUGHTER)
  userId            String
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relações
  lot               CattleLot @relation(fields: [lotId], references: [id])
  buyer             Partner @relation(fields: [buyerId], references: [id])
  user              User @relation(fields: [userId], references: [id])

  @@map("sale_records")
}

enum SaleStatus {
  NEXT_SLAUGHTER
  SCHEDULED
  SHIPPED
  SLAUGHTERED
  RECONCILED
  CANCELLED
}

// ========== CENTRO FINANCEIRO ==========

model CostCenter {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  type        CostCenterType
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  parent      CostCenter? @relation("CostCenterHierarchy", fields: [parentId], references: [id])
  children    CostCenter[] @relation("CostCenterHierarchy")
  expenses    Expense[]
  revenues    Revenue[]

  @@map("cost_centers")
}

enum CostCenterType {
  ACQUISITION
  FATTENING
  ADMINISTRATIVE
  FINANCIAL
  REVENUE
  CONTRIBUTION
}

model Expense {
  id              String   @id @default(cuid())
  category        String
  costCenterId    String?
  description     String
  totalAmount     Float
  dueDate         DateTime
  paymentDate     DateTime?
  isPaid          Boolean  @default(false)
  impactsCashFlow Boolean  @default(true)
  
  // Relacionamentos opcionais
  lotId           String?
  penId           String?
  vendorId        String?
  payerAccountId  String?
  purchaseOrderId String?
  
  userId          String
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  costCenter      CostCenter? @relation(fields: [costCenterId], references: [id])
  lot             CattleLot? @relation(fields: [lotId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  payerAccount    PayerAccount? @relation(fields: [payerAccountId], references: [id])
  
  allocations     ExpenseAllocation[]
  reconciliations ReconciliationItem[]

  @@map("expenses")
}

model Revenue {
  id              String   @id @default(cuid())
  category        String
  costCenterId    String?
  description     String
  totalAmount     Float
  dueDate         DateTime
  receiptDate     DateTime?
  isReceived      Boolean  @default(false)
  
  // Relacionamentos opcionais
  saleRecordId    String?
  buyerId         String?
  payerAccountId  String?
  
  userId          String
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  costCenter      CostCenter? @relation(fields: [costCenterId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  payerAccount    PayerAccount? @relation(fields: [payerAccountId], references: [id])
  
  allocations     RevenueAllocation[]
  reconciliations ReconciliationItem[]

  @@map("revenues")
}

model NonCashExpense {
  id              String   @id @default(cuid())
  type            NonCashType
  lotId           String
  description     String
  quantity        Int?
  expectedValue   Float?
  actualValue     Float?
  totalValue      Float
  recordDate      DateTime
  notes           String?
  createdAt       DateTime @default(now())

  // Relações
  lot             CattleLot @relation(fields: [lotId], references: [id])

  @@map("non_cash_expenses")
}

enum NonCashType {
  MORTALITY
  WEIGHT_LOSS
  DEPRECIATION
  ADJUSTMENT
  OTHER
}

// ========== ALOCAÇÕES FINANCEIRAS ==========

model ExpenseAllocation {
  id              String   @id @default(cuid())
  expenseId       String
  entityType      AllocationEntity
  entityId        String
  allocatedAmount Float
  percentage      Float
  createdAt       DateTime @default(now())

  // Relações
  expense         Expense @relation(fields: [expenseId], references: [id])

  @@map("expense_allocations")
}

model RevenueAllocation {
  id              String   @id @default(cuid())
  revenueId       String
  entityType      AllocationEntity
  entityId        String
  allocatedAmount Float
  percentage      Float
  createdAt       DateTime @default(now())

  // Relações
  revenue         Revenue @relation(fields: [revenueId], references: [id])

  @@map("revenue_allocations")
}

enum AllocationEntity {
  LOT
  PEN
  GLOBAL
}

// ========== APORTES E CONTRIBUIÇÕES ==========

model FinancialContribution {
  id              String   @id @default(cuid())
  type            ContributionType
  partnerId       String
  payerAccountId  String
  amount          Float
  contributionDate DateTime
  description     String?
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  partner         Partner @relation(fields: [partnerId], references: [id])
  payerAccount    PayerAccount @relation(fields: [payerAccountId], references: [id])
  user            User @relation(fields: [userId], references: [id])

  @@map("financial_contributions")
}

enum ContributionType {
  PARTNER_CONTRIBUTION
  PARTNER_LOAN
  BANK_FINANCING
  EXTERNAL_INVESTOR
}

// ========== CONTAS A PAGAR/RECEBER ==========

model FinancialAccount {
  id              String   @id @default(cuid())
  type            AccountTransactionType
  category        String
  purchaseOrderId String?
  description     String
  amount          Float
  dueDate         DateTime
  paymentDate     DateTime?
  status          TransactionStatus @default(PENDING)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  @@map("financial_accounts")
}

enum AccountTransactionType {
  PAYABLE
  RECEIVABLE
}

enum TransactionStatus {
  PENDING
  PAID
  RECEIVED
  OVERDUE
  CANCELLED
}

// ========== CONCILIAÇÃO BANCÁRIA ==========

model BankStatement {
  id              String   @id @default(cuid())
  payerAccountId  String
  statementDate   DateTime
  description     String
  amount          Float
  balance         Float
  transactionType String
  reference       String?
  importBatchId   String?
  isReconciled    Boolean  @default(false)
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  payerAccount    PayerAccount @relation(fields: [payerAccountId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  reconciliations ReconciliationItem[]

  @@map("bank_statements")
}

model FinancialReconciliation {
  id                String   @id @default(cuid())
  payerAccountId    String
  reconciliationDate DateTime
  status            ReconciliationStatus
  totalReconciled   Float
  userId            String
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relações
  payerAccount      PayerAccount @relation(fields: [payerAccountId], references: [id])
  user              User @relation(fields: [userId], references: [id])
  items             ReconciliationItem[]

  @@map("financial_reconciliations")
}

enum ReconciliationStatus {
  DRAFT
  COMPLETED
  CANCELLED
}

model ReconciliationItem {
  id                  String   @id @default(cuid())
  reconciliationId    String
  bankStatementId     String
  transactionType     ReconciliationTransactionType
  transactionId       String?
  amount              Float
  createdAt           DateTime @default(now())

  // Relações
  reconciliation      FinancialReconciliation @relation(fields: [reconciliationId], references: [id])
  bankStatement       BankStatement @relation(fields: [bankStatementId], references: [id])
  expense             Expense? @relation(fields: [transactionId], references: [id], map: "reconciliation_items_expense_fkey")
  revenue             Revenue? @relation(fields: [transactionId], references: [id], map: "reconciliation_items_revenue_fkey")

  @@map("reconciliation_items")
}

enum ReconciliationTransactionType {
  EXPENSE
  REVENUE
  CONTRIBUTION
  TRANSFER
}

// ========== NOTIFICAÇÕES ==========

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json?
  isRead      Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())

  // Relações
  user        User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  SALE_COMPLETED
  SYSTEM_UPDATE
  ALERT
  INFO
}

// ========== AUDITORIA ==========

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entity      String
  entityId    String
  oldData     Json?
  newData     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relações
  user        User @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([userId, createdAt])
  @@map("audit_logs")
} 