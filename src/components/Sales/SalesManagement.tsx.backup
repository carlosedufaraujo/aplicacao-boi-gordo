import React, { useState, useMemo } from 'react';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';

// Componentes shadcn/ui
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// √çcones
import {
  Plus,
  Search,
  Filter,
  Download,
  Upload,
  RefreshCw,
  Eye,
  Edit,
  Trash2,
  MoreHorizontal,
  Calendar,
  DollarSign,
  Package,
  Users,
  TrendingUp,
  AlertCircle,
  CheckCircle,
  Clock,
  Beef,
  Calculator,
  Receipt,
  CreditCard,
  Building2,
  Activity,
  BarChart3,
  Target,
  Info,
  FileText,
  Scale,
  Truck,
  MapPin,
  Hash,
  AlertTriangle,
  ChevronRight
} from 'lucide-react';

// Hooks e APIs
import { useSaleRecordsApi } from '@/hooks/api/useSaleRecordsApi';
import { useCattlePurchasesApi } from '@/hooks/api/useCattlePurchasesApi';
import { usePartnersApi } from '@/hooks/api/usePartnersApi';
import { usePensApi } from '@/hooks/api/usePensApi';
import { formatCurrency, formatWeight, formatCompactCurrency } from '@/utils/formatters';
import { showErrorNotification, showSuccessNotification, showWarningNotification } from '@/utils/errorHandler';

// Componentes
import { EnhancedSalesForm } from './EnhancedSalesForm';

interface SalesManagementProps {
  className?: string;
}

export const SalesManagement: React.FC<SalesManagementProps> = ({ className }) => {
  const [showSalesForm, setShowSalesForm] = useState(false);
  const [selectedSale, setSelectedSale] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterBuyer, setFilterBuyer] = useState('all');
  const [filterDateRange, setFilterDateRange] = useState('all');
  const [activeView, setActiveView] = useState<'table' | 'cards'>('table');

  // Hooks de API
  const { 
    saleRecords, 
    loading: salesLoading, 
    error: salesError, 
    stats,
    deleteSaleRecord,
    refresh: refreshSales 
  } = useSaleRecordsApi();
  
  // Teste direto da API ao montar o componente
  React.useEffect(() => {
    fetch('http://localhost:3001/api/v1/sale-records')
      .then(res => res.json())
      .then(data => {
      })
      .catch(err => console.error('‚ùå Erro no fetch direto:', err));
  }, []);
  
  const { cattlePurchases, loading: purchasesLoading } = useCattlePurchasesApi();
  const { partners, loading: partnersLoading } = usePartnersApi();
  const { pens, loading: pensLoading } = usePensApi();

  const isLoading = salesLoading || purchasesLoading || partnersLoading || pensLoading;

  // Filtrar vendas baseado nos crit√©rios
  const filteredSales = useMemo(() => {
    return saleRecords.filter(sale => {
      // Filtro de busca
      if (searchTerm) {
        const search = searchTerm.toLowerCase();
        const buyerName = sale.buyer?.name || '';
        const penNumber = sale.pen?.penNumber || '';
        const purchaseCode = sale.purchase?.lotCode || '';
        
        if (!buyerName.toLowerCase().includes(search) && 
            !penNumber.toLowerCase().includes(search) &&
            !purchaseCode.toLowerCase().includes(search) &&
            !sale.id.toLowerCase().includes(search)) {
          return false;
        }
      }

      // Filtro de comprador
      if (filterBuyer !== 'all' && sale.buyerId !== filterBuyer) {
        return false;
      }

      // Filtro de per√≠odo
      if (filterDateRange !== 'all') {
        const saleDate = new Date(sale.saleDate);
        const now = new Date();
        
        switch (filterDateRange) {
          case 'today':
            if (saleDate.toDateString() !== now.toDateString()) return false;
            break;
          case 'week':
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            if (saleDate < weekAgo) return false;
            break;
          case 'month':
            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            if (saleDate < monthAgo) return false;
            break;
        }
      }

      return true;
    });
  }, [saleRecords, searchTerm, filterBuyer, filterDateRange]);

  // Debug logs
  console.log('üîç SalesManagement Debug:', {
    saleRecords: saleRecords?.length || 0,
    salesLoading,
    salesError,
    stats,
    filteredSales: filteredSales?.length || 0,
    rawSaleRecords: saleRecords
  });

  // M√©tricas calculadas
  const metrics = useMemo(() => {
    const totalSales = filteredSales.length;
    const totalRevenue = filteredSales.reduce((sum, sale) => sum + (sale.totalValue || 0), 0);
    const totalNetValue = filteredSales.reduce((sum, sale) => sum + (sale.netValue || 0), 0);
    const totalAnimals = filteredSales.reduce((sum, sale) => sum + (sale.quantity || 0), 0);
    const totalWeight = filteredSales.reduce((sum, sale) => sum + (sale.exitWeight || 0), 0);
    const totalCarcassWeight = filteredSales.reduce((sum, sale) => sum + (sale.carcassWeight || 0), 0);
    const averagePrice = filteredSales.length > 0 
      ? filteredSales.reduce((sum, sale) => sum + (sale.pricePerArroba || 0), 0) / filteredSales.length 
      : 0;
    const averageYield = totalCarcassWeight > 0 && totalWeight > 0
      ? (totalCarcassWeight / totalWeight) * 100
      : 0;
    
    return {
      totalSales,
      totalRevenue,
      totalNetValue,
      totalAnimals,
      totalWeight,
      totalCarcassWeight,
      averagePrice,
      averageYield
    };
  }, [filteredSales]);

  const handleEditSale = (sale: any) => {
    setSelectedSale(sale);
    setShowSalesForm(true);
  };

  const handleDeleteSale = async (saleId: string) => {
    if (window.confirm('Tem certeza que deseja excluir esta venda?')) {
      const success = await deleteSaleRecord(saleId);
      if (success) {
        showSuccessNotification('Venda exclu√≠da com sucesso');
        refreshSales();
      }
    }
  };

  const handleViewDetails = (sale: any) => {
    // Implementar visualiza√ß√£o detalhada
  };

  const handleExport = () => {
    showWarningNotification('Exporta√ß√£o em desenvolvimento');
  };
  const handleImport = () => {
    showWarningNotification("Importa√ß√£o em desenvolvimento");
  };
  const getPaymentTypeBadge = (type: string) => {
    switch (type) {
      case 'cash':
        return <Badge variant="outline" className="text-green-600">√Ä Vista</Badge>;
      case 'installment':
        return <Badge variant="outline" className="text-blue-600">Parcelado</Badge>;
      default:
        return <Badge variant="outline">{type}</Badge>;
    }
  };

  if (salesError) {
    return (
      <Alert className="m-4">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>
          Erro ao carregar vendas: {salesError}
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <TooltipProvider>
      <div className={`flex flex-col gap-6 ${className}`}>
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Gest√£o de Vendas</h1>
            <p className="text-sm text-gray-500 mt-1">
              Gerencie as vendas de gado e acompanhe o faturamento
            </p>
          </div>
          
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={handleExport}>
              <Download className="h-4 w-4 mr-2" />
              Exportar
            </Button>
            <Button variant="outline" size="sm" onClick={handleImport}>
              <Upload className="h-4 w-4 mr-2" />
              Importar
            </Button>
            <Button onClick={() => setShowSalesForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Nova Venda
            </Button>
          </div>
        </div>

        {/* Filtros */}
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-base">Filtros e Busca</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Buscar por c√≥digo, comprador..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-8"
                  />
                </div>
              </div>

              <Select value={filterBuyer} onValueChange={setFilterBuyer}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Comprador" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos Compradores</SelectItem>
                  {partners?.filter(p => p.type === "BUYER")
                    .map(partner => (
                      <SelectItem key={partner.id} value={partner.id}>
                        {partner.name}
                      </SelectItem>
                    ))}
                </SelectContent>

              </Select>
              <Select value={filterDateRange} onValueChange={setFilterDateRange}>
                <SelectTrigger className="w-[140px]">
                  <SelectValue placeholder="Per√≠odo" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todo Per√≠odo</SelectItem>
                  <SelectItem value="today">Hoje</SelectItem>
                  <SelectItem value="week">√öltima Semana</SelectItem>
                  <SelectItem value="month">√öltimo M√™s</SelectItem>
              </SelectContent>
              </Select>

              <div className="flex gap-2">
                <Button
                  variant={activeView === 'table' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setActiveView('table')}
                >
                  <FileText className="h-4 w-4" />
                </Button>
                <Button
                  variant={activeView === 'cards' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setActiveView('cards')}
                >
                  <Package className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Lista de Vendas */}
        {isLoading ? (
          <Card>
            <CardContent className="flex items-center justify-center py-12">
              <div className="flex items-center gap-2 text-muted-foreground">
                <Activity className="h-4 w-4 animate-spin" />
                <span>Carregando vendas...</span>
              </div>
            </CardContent>
          </Card>
        ) : activeView === 'table' ? (
          <Card>
            <CardHeader>
              <CardTitle className="text-base">Vendas Registradas</CardTitle>
              <CardDescription>
                {filteredSales.length} vendas encontradas
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[600px]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Data</TableHead>
                      <TableHead>Lote/Curral</TableHead>
                      <TableHead>Comprador</TableHead>
                      <TableHead>Qtd</TableHead>
                      <TableHead>Peso</TableHead>
                      <TableHead>Pre√ßo/@</TableHead>
                      <TableHead>Valor Total</TableHead>
                      <TableHead>Lucro</TableHead>
                      <TableHead>Pagamento</TableHead>
                      
                      <TableHead className="text-right">A√ß√µes</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredSales.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={10} className="text-center text-muted-foreground">
                          Nenhuma venda encontrada
                        </TableCell>
                      </TableRow>
                    ) : (
                      filteredSales.map((sale) => (
                        <TableRow key={sale.id}>
                          <TableCell>
                            {format(new Date(sale.saleDate), "dd/MM/yy", { locale: ptBR })}
                          </TableCell>
                          <TableCell>
                            <div className="flex flex-col">
                              <span className="font-medium">
                                {sale.pen?.penNumber || sale.purchase?.lotCode || "-"}
                              </span>
                              <span className="text-xs text-muted-foreground">
                                {sale.quantity} animais
                              </span>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex flex-col">
                              <span>{sale.buyer?.name || "Desconhecido"}</span>
                              <span className="text-xs text-muted-foreground">
                                {sale.buyer?.cpfCnpj || ""}
                              </span>
                            </div>
                          </TableCell>
                          <TableCell>{sale.quantity}</TableCell>
                            <TableCell>{formatWeight(sale.exitWeight)}</TableCell>
                            <TableCell>{formatCurrency(sale.pricePerArroba)}</TableCell>
                            <TableCell className="font-medium text-green-600">
                              {formatCurrency(sale.totalValue)}
                            </TableCell>
                            <TableCell>
                              <div className="flex flex-col">
                                <span className="font-medium text-blue-600">
                                  {formatCurrency(sale.netValue)}
                                </span>
                                <span className="text-xs text-muted-foreground">
                                  Rend: {sale.carcassYield?.toFixed(1)}%
                                </span>
                              </div>
                            </TableCell>
                            <TableCell>{getPaymentTypeBadge(sale.paymentType)}</TableCell>
                            
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="sm">
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuItem onClick={() => handleViewDetails(sale)}>
                                    <Eye className="mr-2 h-4 w-4" />
                                    Visualizar
                                  </DropdownMenuItem>
                                  <DropdownMenuItem onClick={() => handleEditSale(sale)}>
                                    <Edit className="mr-2 h-4 w-4" />
                                    Editar
                                  </DropdownMenuItem>
                                  <DropdownMenuSeparator />
                                  <DropdownMenuItem 
                                    onClick={() => handleDeleteSale(sale.id)}
                                    className="text-destructive"
                                  >
                                    <Trash2 className="mr-2 h-4 w-4" />
                                    Excluir
                                  </DropdownMenuItem>
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))
                    )}
                  </TableBody>
                </Table>
              </ScrollArea>
            </CardContent>
          </Card>
        ) : (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {filteredSales.map((sale) => {
              return (
                <Card key={sale.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader className="pb-3">
                    <div className="flex items-start justify-between">
                      <div>
                        <CardTitle className="text-base">
                          {sale.pen?.penNumber || sale.purchase?.lotCode || `Venda ${sale.id.slice(-6)}`}
                        </CardTitle>
                        <CardDescription>
                          {format(new Date(sale.saleDate), 'dd/MM/yyyy', { locale: ptBR })}
                        </CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-center gap-2 text-sm">
                      <Building2 className="h-4 w-4 text-muted-foreground" />
                      <span>{sale.buyer?.name || 'Desconhecido'}</span>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="text-muted-foreground">Quantidade:</span>
                        <p className="font-medium">{sale.quantity} cabe√ßas</p>
                      </div>
                      <div>
                        <span className="text-muted-foreground">Peso Sa√≠da:</span>
                        <p className="font-medium">{formatWeight(sale.exitWeight)}</p>
                      </div>
                    </div>
                    
                    <Separator />
                    
                    <div className="space-y-1">
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Valor Total:</span>
                        <span className="font-medium text-green-600">
                          {formatCurrency(sale.totalValue)}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Valor L√≠quido:</span>
                        <span className="font-medium text-blue-600">
                          {formatCurrency(sale.netValue)}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-muted-foreground">Rendimento:</span>
                        <span className="font-medium">
                          {sale.carcassYield?.toFixed(1)}%
                        </span>
                      </div>
                    </div>
                    
                    <div className="flex justify-between items-center pt-2">
                      {getPaymentTypeBadge(sale.paymentType)}
                      
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem onClick={() => handleViewDetails(sale)}>
                            <Eye className="mr-2 h-4 w-4" />
                            Visualizar
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => handleEditSale(sale)}>
                            <Edit className="mr-2 h-4 w-4" />
                            Editar
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem 
                            onClick={() => handleDeleteSale(sale.id)}
                            className="text-destructive"
                          >
                            <Trash2 className="mr-2 h-4 w-4" />
                            Excluir
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {/* Formul√°rio de Venda */}
        <EnhancedSalesForm
          isOpen={showSalesForm}
          onClose={() => {
            setShowSalesForm(false);
            setSelectedSale(null);
            refreshSales();
          }}
          saleToEdit={selectedSale}
        />
      </div>
    </TooltipProvider>
  );
};

export default SalesManagement;
