import api from '@/lib/api';

export interface CalendarEvent {
  id: string;
  title: string;
  description?: string;
  type: 'PURCHASE' | 'SALE' | 'HEALTH' | 'TRANSPORT' | 'FINANCE' | 'GENERAL' | 'DRE' | 'PAYMENT' | 'MEETING' | 'TASK';
  date: string;
  time?: string;
  location?: string;
  participants?: string[];
  status: 'SCHEDULED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED' | 'OVERDUE';
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  recurring?: boolean;
  tags?: string[];
  color?: string;
  relatedId?: string;
  amount?: number;
  autoGenerated?: boolean;
  userId?: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateCalendarEventData {
  title: string;
  description?: string;
  type: CalendarEvent['type'];
  date: Date;
  time?: string;
  location?: string;
  participants?: string[];
  status?: CalendarEvent['status'];
  priority?: CalendarEvent['priority'];
  recurring?: boolean;
  tags?: string[];
  color?: string;
  relatedId?: string;
  amount?: number;
}

export interface UpdateCalendarEventData {
  title?: string;
  description?: string;
  type?: CalendarEvent['type'];
  date?: Date;
  time?: string;
  location?: string;
  participants?: string[];
  status?: CalendarEvent['status'];
  priority?: CalendarEvent['priority'];
  recurring?: boolean;
  tags?: string[];
  color?: string;
  relatedId?: string;
  amount?: number;
}

export interface CalendarEventFilters {
  startDate?: Date;
  endDate?: Date;
  type?: CalendarEvent['type'];
  status?: CalendarEvent['status'];
  priority?: CalendarEvent['priority'];
  userId?: string;
  tags?: string[];
  autoGenerated?: boolean;
}

export interface CalendarEventStats {
  totalEvents: number;
  eventsByType: Record<string, number>;
  eventsByStatus: Record<string, number>;
  overdueEvents: number;
  upcomingEvents: number;
  thisMonthEvents: number;
  highPriorityEvents: number;
}

const calendarEventService = {
  // Buscar eventos com filtros
  async findAll(filters: CalendarEventFilters = {}): Promise<CalendarEvent[]> {
    const params = new URLSearchParams();
    
    if (filters.startDate) params.append('startDate', filters.startDate.toISOString());
    if (filters.endDate) params.append('endDate', filters.endDate.toISOString());
    if (filters.type) params.append('type', filters.type);
    if (filters.status) params.append('status', filters.status);
    if (filters.priority) params.append('priority', filters.priority);
    if (filters.userId) params.append('userId', filters.userId);
    if (filters.autoGenerated !== undefined) params.append('autoGenerated', filters.autoGenerated.toString());
    if (filters.tags && filters.tags.length > 0) {
      filters.tags.forEach(tag => params.append('tags', tag));
    }

    const response = await api.get(`/calendar-events?${params.toString()}`);
    return response.data.data;
  },

  // Buscar evento por ID
  async findById(id: string): Promise<CalendarEvent> {
    const response = await api.get(`/calendar-events/${id}`);
    return response.data.data;
  },

  // Criar novo evento
  async create(data: CreateCalendarEventData): Promise<CalendarEvent> {
    const response = await api.post('/calendar-events', {
      ...data,
      date: data.date.toISOString()
    });
    return response.data.data;
  },

  // Atualizar evento
  async update(id: string, data: UpdateCalendarEventData): Promise<CalendarEvent> {
    const updateData = {
      ...data,
      date: data.date ? data.date.toISOString() : undefined
    };
    
    const response = await api.put(`/calendar-events/${id}`, updateData);
    return response.data.data;
  },

  // Excluir evento
  async delete(id: string): Promise<void> {
    await api.delete(`/calendar-events/${id}`);
  },

  // Obter estatísticas
  async getStats(filters: CalendarEventFilters = {}): Promise<CalendarEventStats> {
    const params = new URLSearchParams();
    
    if (filters.startDate) params.append('startDate', filters.startDate.toISOString());
    if (filters.endDate) params.append('endDate', filters.endDate.toISOString());
    if (filters.userId) params.append('userId', filters.userId);

    const response = await api.get(`/calendar-events/stats?${params.toString()}`);
    return response.data.data;
  },

  // Gerar eventos automáticos
  async generateAutoEvents(): Promise<CalendarEvent[]> {
    const response = await api.post('/calendar-events/generate-auto');
    return response.data.data;
  },

  // Atualizar eventos em atraso
  async updateOverdueEvents(): Promise<{ updatedCount: number }> {
    const response = await api.patch('/calendar-events/update-overdue');
    return response.data.data;
  },

  // Marcar evento como concluído
  async completeEvent(id: string): Promise<CalendarEvent> {
    const response = await api.patch(`/calendar-events/${id}/complete`);
    return response.data.data;
  },

  // Cancelar evento
  async cancelEvent(id: string): Promise<CalendarEvent> {
    const response = await api.patch(`/calendar-events/${id}/cancel`);
    return response.data.data;
  }
};

export default calendarEventService;
