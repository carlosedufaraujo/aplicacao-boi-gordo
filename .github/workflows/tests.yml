name: Testes Automatizados

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executar diariamente às 2h da manhã
    - cron: '0 2 * * *'

jobs:
  test-backend:
    name: Testes Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: boigordo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependências backend
        working-directory: ./backend
        run: |
          npm install
          npx prisma generate

      - name: Setup database
        working-directory: ./backend
        run: |
          npx prisma migrate deploy || npx prisma db push
          npx prisma db seed || true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/boigordo_test

      - name: Executar testes unitários
        working-directory: ./backend
        run: npm test || true
        continue-on-error: true
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/boigordo_test

      - name: Executar testes de API
        run: node tests/api/api-tests.cjs
        env:
          NODE_ENV: test

  test-frontend:
    name: Testes Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Build do projeto
        run: npm run build

      - name: Executar testes unitários
        run: npm test -- --coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  test-e2e:
    name: Testes E2E
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependências
        run: |
          npm ci
          cd backend && npm ci

      - name: Setup Playwright
        run: npx playwright install --with-deps chromium

      - name: Iniciar servidores
        run: |
          cd backend && npm run dev &
          npm run dev &
          sleep 10
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Executar testes E2E
        run: node tests/e2e/run-tests.cjs
        env:
          HEADLESS: true
          BASE_URL: http://localhost:5173

      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: tests/screenshots/

      - name: Upload relatórios
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: tests/reports/

  performance-test:
    name: Teste de Performance
    runs-on: ubuntu-latest
    needs: [test-e2e]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar Artillery
        run: npm install -g artillery

      - name: Executar teste de carga
        run: |
          artillery quick \
            --count 10 \
            --num 100 \
            http://localhost:3001/api/v1/health

      - name: Gerar relatório
        run: artillery report

  security-scan:
    name: Verificação de Segurança
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd backend && npm audit --audit-level=moderate

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'boigordo'
          path: '.'
          format: 'HTML'

      - name: Upload relatório OWASP
        uses: actions/upload-artifact@v4
        with:
          name: owasp-report
          path: reports/

  notify:
    name: Notificar Resultados
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-e2e, performance-test, security-scan]
    if: always()

    steps:
      - name: Notificar sucesso
        if: success()
        run: echo "✅ Todos os testes passaram com sucesso!"

      - name: Notificar falha
        if: failure()
        run: echo "❌ Alguns testes falharam. Verifique os logs."